{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Score, Side, StyledMatch, Team, TopText, BottomText, Wrapper, Line, Anchor } from './styles';\nfunction Match({\n  bottomHovered,\n  bottomParty,\n  bottomText,\n  bottomWon,\n  match,\n  onMatchClick,\n  onMouseEnter,\n  onMouseLeave,\n  onPartyClick,\n  topHovered,\n  topParty,\n  topText,\n  topWon\n}) {\n  return _jsxs(Wrapper, {\n    children: [_jsxs(\"div\", Object.assign({\n      style: {\n        display: 'flex',\n        justifyContent: 'space-between'\n      }\n    }, {\n      children: [_jsx(TopText, {\n        children: topText\n      }), (match.href || typeof onMatchClick === 'function') && _jsx(Anchor, Object.assign({\n        href: match.href,\n        onClick: event => onMatchClick === null || onMatchClick === void 0 ? void 0 : onMatchClick({\n          match,\n          topWon,\n          bottomWon,\n          event\n        })\n      }, {\n        children: _jsx(TopText, {\n          children: \"Match Details\"\n        })\n      }))]\n    })), _jsxs(StyledMatch, {\n      children: [_jsxs(Side, Object.assign({\n        onMouseEnter: () => onMouseEnter(topParty.id),\n        onMouseLeave: onMouseLeave,\n        won: topWon,\n        hovered: topHovered,\n        onClick: () => onPartyClick === null || onPartyClick === void 0 ? void 0 : onPartyClick(topParty, topWon)\n      }, {\n        children: [_jsx(Team, {\n          children: topParty === null || topParty === void 0 ? void 0 : topParty.name\n        }), _jsx(Score, Object.assign({\n          won: topWon\n        }, {\n          children: topParty === null || topParty === void 0 ? void 0 : topParty.resultText\n        }))]\n      })), _jsx(Line, {\n        highlighted: topHovered || bottomHovered\n      }), _jsxs(Side, Object.assign({\n        onMouseEnter: () => onMouseEnter(bottomParty.id),\n        onMouseLeave: onMouseLeave,\n        won: bottomWon,\n        hovered: bottomHovered,\n        onClick: () => onPartyClick === null || onPartyClick === void 0 ? void 0 : onPartyClick(bottomParty, bottomWon)\n      }, {\n        children: [_jsx(Team, {\n          children: bottomParty === null || bottomParty === void 0 ? void 0 : bottomParty.name\n        }), _jsx(Score, Object.assign({\n          won: bottomWon\n        }, {\n          children: bottomParty === null || bottomParty === void 0 ? void 0 : bottomParty.resultText\n        }))]\n      }))]\n    }), _jsx(BottomText, {\n      children: bottomText !== null && bottomText !== void 0 ? bottomText : ' '\n    })]\n  });\n}\nexport default Match;\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}