{"ast":null,"code":"const _excluded = [\"width\", \"height\", \"onChangeTool\", \"onChangeValue\"];\nfunction _extends() {\n  return _extends = Object.assign ? Object.assign.bind() : function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n    return n;\n  }, _extends.apply(null, arguments);\n}\nfunction _objectWithoutProperties(e, t) {\n  if (null == e) return {};\n  var o,\n    r,\n    i = _objectWithoutPropertiesLoose(e, t);\n  if (Object.getOwnPropertySymbols) {\n    var s = Object.getOwnPropertySymbols(e);\n    for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);\n  }\n  return i;\n}\nfunction _objectWithoutPropertiesLoose(r, e) {\n  if (null == r) return {};\n  var t = {};\n  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {\n    if (e.includes(n)) continue;\n    t[n] = r[n];\n  }\n  return t;\n}\nimport React from \"react\";\nimport ReactSVGPanZoom from './viewer';\nimport PropTypes from \"prop-types\";\nimport { TOOL_NONE } from \"./constants\";\nexport default class UncontrolledReactSVGPanZoom extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: props.defaultValue || {},\n      tool: props.defaultTool || TOOL_NONE\n    };\n    this.Viewer = null;\n    this.changeTool = this.changeTool.bind(this);\n    this.changeValue = this.changeValue.bind(this);\n  }\n  changeTool(tool) {\n    this.setState({\n      tool\n    });\n  }\n  changeValue(value) {\n    this.setState({\n      value\n    });\n  }\n  pan(SVGDeltaX, SVGDeltaY) {\n    this.Viewer.pan(SVGDeltaX, SVGDeltaY);\n  }\n  zoom(SVGPointX, SVGPointY, scaleFactor) {\n    this.Viewer.zoom(SVGPointX, SVGPointY, scaleFactor);\n  }\n  fitSelection(selectionSVGPointX, selectionSVGPointY, selectionWidth, selectionHeight) {\n    this.Viewer.fitSelection(selectionSVGPointX, selectionSVGPointY, selectionWidth, selectionHeight);\n  }\n  fitToViewer(SVGAlignX, SVGAlignY) {\n    this.Viewer.fitToViewer(SVGAlignX, SVGAlignY);\n  }\n  zoomOnViewerCenter(scaleFactor) {\n    this.Viewer.zoomOnViewerCenter(scaleFactor);\n  }\n  setPointOnViewerCenter(SVGPointX, SVGPointY, zoomLevel) {\n    this.Viewer.setPointOnViewerCenter(SVGPointX, SVGPointY, zoomLevel);\n  }\n  reset() {\n    this.Viewer.reset();\n  }\n  openMiniature() {\n    this.Viewer.openMiniature();\n  }\n  closeMiniature() {\n    this.Viewer.closeMiniature();\n  }\n  render() {\n    const _this$props = this.props,\n      {\n        width,\n        height,\n        onChangeTool,\n        onChangeValue\n      } = _this$props,\n      props = _objectWithoutProperties(_this$props, _excluded);\n    const {\n      tool,\n      value\n    } = this.state;\n    return /*#__PURE__*/React.createElement(ReactSVGPanZoom, _extends({\n      width: width,\n      height: height,\n      tool: tool,\n      onChangeTool: this.changeTool,\n      value: value,\n      onChangeValue: this.changeValue,\n      ref: Viewer => this.Viewer = Viewer\n    }, props));\n  }\n}\nUncontrolledReactSVGPanZoom.propTypes = {\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  defaultValue: PropTypes.object,\n  defaultTool: PropTypes.string\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}