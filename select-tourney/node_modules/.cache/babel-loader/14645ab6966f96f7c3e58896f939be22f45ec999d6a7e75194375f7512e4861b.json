{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { baseUrl } from '../../app/shared/baseUrl';\nexport const fetchTournaments = createAsyncThunk('tournaments/fetchTournaments', async () => {\n  const response = await fetch(baseUrl + 'tournaments');\n  if (!response.ok) {\n    return Promise.reject('Unable to fetch, status: ' + response.status);\n  }\n  const data = await response.json();\n  return data;\n});\nexport const postTournament = createAsyncThunk('tournaments/postTournament', async (tournament, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch(baseUrl + 'tournaments', {\n      method: \"POST\",\n      body: JSON.stringify(tournament),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to post tournament: ${response.status}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nconst initialState = {\n  tournamentsArray: [],\n  currentTournaments: [],\n  pastTournaments: [],\n  upcomingTournaments: [],\n  isLoading: true,\n  errMsg: ''\n};\nconst categorizeTournaments = tournaments => {\n  const today = new Date().toISOString().split('T')[0]; // Extract only the date part\n\n  return {\n    currentTournaments: tournaments.filter(tournament => tournament.date_utc.startsWith(today)),\n    pastTournaments: tournaments.filter(tournament => tournament.date_utc < today),\n    upcomingTournaments: tournaments.filter(tournament => tournament.date_utc > today)\n  };\n};\nconst tournamentsSlice = createSlice({\n  name: 'tournaments',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchTournaments.pending, state => {\n      state.isLoading = true;\n    }).addCase(fetchTournaments.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.errMsg = '';\n      state.tournamentsArray = action.payload;\n\n      // Categorize tournaments and store them separately\n      const {\n        currentTournaments,\n        pastTournaments,\n        upcomingTournaments\n      } = categorizeTournaments(action.payload);\n      state.currentTournaments = currentTournaments;\n      state.pastTournaments = pastTournaments;\n      state.upcomingTournaments = upcomingTournaments;\n    }).addCase(fetchTournaments.rejected, (state, action) => {\n      state.isLoading = false;\n      state.errMsg = action.error ? action.error.message : 'Fetch failed';\n    }).addCase(postTournament.fulfilled, (state, action) => {\n      state.tournamentsArray.push(action.payload);\n\n      // Re-categorize after adding a new tournament\n      const {\n        currentTournaments,\n        pastTournaments,\n        upcomingTournaments\n      } = categorizeTournaments(state.tournamentsArray);\n      state.currentTournaments = currentTournaments;\n      state.pastTournaments = pastTournaments;\n      state.upcomingTournaments = upcomingTournaments;\n    }).addCase(postTournament.rejected, (state, action) => {\n      alert(`Your tournament could not be posted\\nError: ` + (action.payload || 'Fetch Failed'));\n    });\n  }\n});\nexport const tournamentsReducer = tournamentsSlice.reducer;\n\n// Updated selectors to directly access the categorized tournament arrays\nexport const selectAllTournaments = state => state.tournaments.tournamentsArray;\nexport const selectCurrentTournaments = state => state.tournaments.currentTournaments;\nexport const selectPastTournaments = state => state.tournaments.pastTournaments;\nexport const selectUpcomingTournaments = state => state.tournaments.upcomingTournaments;\nexport const selectTournamentById = id => state => {\n  return state.tournaments.tournamentsArray.find(tournament => tournament.id === parseInt(id));\n};\nexport const selectFeaturedTournaments = state => {\n  return state.tournaments.tournamentsArray.filter(tournament => tournament.is_featured === true);\n};","map":{"version":3,"names":["createSlice","createAsyncThunk","baseUrl","fetchTournaments","response","fetch","ok","Promise","reject","status","data","json","postTournament","tournament","rejectWithValue","method","body","JSON","stringify","headers","Error","error","message","initialState","tournamentsArray","currentTournaments","pastTournaments","upcomingTournaments","isLoading","errMsg","categorizeTournaments","tournaments","today","Date","toISOString","split","filter","date_utc","startsWith","tournamentsSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","push","alert","tournamentsReducer","reducer","selectAllTournaments","selectCurrentTournaments","selectPastTournaments","selectUpcomingTournaments","selectTournamentById","id","find","parseInt","selectFeaturedTournaments","is_featured"],"sources":["/Users/ag/Desktop/SelectTourney/select-tourney/src/features/tournaments/tournamentsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { baseUrl } from '../../app/shared/baseUrl';\n\nexport const fetchTournaments = createAsyncThunk(\n    'tournaments/fetchTournaments',\n    async () => {\n        const response = await fetch(baseUrl + 'tournaments');\n        if (!response.ok) {\n            return Promise.reject('Unable to fetch, status: ' + response.status);\n        }\n        const data = await response.json();\n        return data;\n    }\n);\n\nexport const postTournament = createAsyncThunk(\n    'tournaments/postTournament',\n    async (tournament, { rejectWithValue }) => {\n        try {\n            const response = await fetch(baseUrl + 'tournaments', {\n                method: \"POST\",\n                body: JSON.stringify(tournament),\n                headers: { 'Content-Type': 'application/json' }\n            });\n\n            if (!response.ok) {\n                throw new Error(`Failed to post tournament: ${response.status}`);\n            }\n\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            return rejectWithValue(error.message);\n        }\n    }\n);\n\nconst initialState = {\n    tournamentsArray: [],\n    currentTournaments: [],\n    pastTournaments: [],\n    upcomingTournaments: [],\n    isLoading: true,\n    errMsg: ''\n};\n\nconst categorizeTournaments = (tournaments) => {\n    const today = new Date().toISOString().split('T')[0]; // Extract only the date part\n\n    return {\n        currentTournaments: tournaments.filter(tournament => tournament.date_utc.startsWith(today)),\n        pastTournaments: tournaments.filter(tournament => tournament.date_utc < today),\n        upcomingTournaments: tournaments.filter(tournament => tournament.date_utc > today)\n    };\n};\n\nconst tournamentsSlice = createSlice({\n    name: 'tournaments',\n    initialState,\n    reducers: {},\n    extraReducers: (builder) => {\n        builder\n            .addCase(fetchTournaments.pending, (state) => {\n                state.isLoading = true;\n            })\n            .addCase(fetchTournaments.fulfilled, (state, action) => {\n                state.isLoading = false;\n                state.errMsg = '';\n                state.tournamentsArray = action.payload;\n                \n                // Categorize tournaments and store them separately\n                const { currentTournaments, pastTournaments, upcomingTournaments } = categorizeTournaments(action.payload);\n                state.currentTournaments = currentTournaments;\n                state.pastTournaments = pastTournaments;\n                state.upcomingTournaments = upcomingTournaments;\n            })\n            .addCase(fetchTournaments.rejected, (state, action) => {\n                state.isLoading = false;\n                state.errMsg = action.error ? action.error.message : 'Fetch failed';\n            })\n            .addCase(postTournament.fulfilled, (state, action) => {\n                state.tournamentsArray.push(action.payload);\n\n                // Re-categorize after adding a new tournament\n                const { currentTournaments, pastTournaments, upcomingTournaments } = categorizeTournaments(state.tournamentsArray);\n                state.currentTournaments = currentTournaments;\n                state.pastTournaments = pastTournaments;\n                state.upcomingTournaments = upcomingTournaments;\n            })\n            .addCase(postTournament.rejected, (state, action) => {\n                alert(`Your tournament could not be posted\\nError: ` + (action.payload || 'Fetch Failed'));\n            });\n    }\n});\n\nexport const tournamentsReducer = tournamentsSlice.reducer;\n\n// Updated selectors to directly access the categorized tournament arrays\nexport const selectAllTournaments = (state) => state.tournaments.tournamentsArray;\nexport const selectCurrentTournaments = (state) => state.tournaments.currentTournaments;\nexport const selectPastTournaments = (state) => state.tournaments.pastTournaments;\nexport const selectUpcomingTournaments = (state) => state.tournaments.upcomingTournaments;\n\nexport const selectTournamentById = (id) => (state) => {\n    return state.tournaments.tournamentsArray.find(\n        (tournament) => tournament.id === parseInt(id)\n    );\n};\n\nexport const selectFeaturedTournaments = (state) => {\n    return state.tournaments.tournamentsArray.filter(\n        (tournament) => tournament.is_featured === true\n    );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}