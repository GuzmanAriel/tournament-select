{"ast":null,"code":"var _jsxFileName = \"/Users/ag/Desktop/SelectTourney/select-tourney/src/components/google/PlacesAutoComplete.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GOOGLE_API_KEY = \"AIzaSyDsb32EFWC9jVcxoQe6chZ55HRU6ibVC6Y\"; // Store in environment variables\n\nconst PlaceAutocompleteComponent = () => {\n  _s();\n  const autocompleteContainerRef = useRef(null);\n  const [selectedPlace, setSelectedPlace] = useState(null);\n  useEffect(() => {\n    // ✅ Load Google Maps Places API dynamically\n    const loadGoogleMaps = async () => {\n      if (window.google && window.google.maps) {\n        initializeAutocomplete();\n        return;\n      }\n\n      // const script = document.createElement(\"script\");\n      // script.src = `https://maps.googleapis.com/maps/api/js?key=${GOOGLE_API_KEY}&libraries=places`;\n      // script.async = true;\n      // script.defer = true;\n      // script.onload = initializeAutocomplete;\n      // document.body.appendChild(script);\n    };\n\n    // ✅ Initialize PlaceAutocompleteElement\n    const initializeAutocomplete = async () => {\n      try {\n        // @ts-ignore\n        await window.google.maps.importLibrary(\"places\");\n        console.log('%csrc/components/google/PlacesAutoComplete.js:30 window.google.maps.places', 'color: #007acc;', window.google.maps);\n        // ✅ Create and append the PlaceAutocompleteElement\n        // @ts-ignore\n        const placeAutocomplete = new window.google.maps.places.PlaceAutocompleteElement();\n        if (autocompleteContainerRef.current) {\n          autocompleteContainerRef.current.innerHTML = \"\"; // Clear previous instances\n          autocompleteContainerRef.current.appendChild(placeAutocomplete);\n        }\n\n        // ✅ Listen for place selection\n        // @ts-ignore\n        placeAutocomplete.addEventListener(\"gmp-placeselect\", async ({\n          place\n        }) => {\n          await place.fetchFields({\n            fields: [\"displayName\", \"formattedAddress\", \"location\"]\n          });\n          setSelectedPlace(place.toJSON());\n        });\n      } catch (error) {\n        console.error(\"Google Maps API failed to load:\", error);\n      }\n    };\n    loadGoogleMaps();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Google Places Autocomplete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: autocompleteContainerRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), selectedPlace && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Selected Place:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(selectedPlace, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(PlaceAutocompleteComponent, \"bUSHhfqvzTiUEjxBkF0DsZ0lUIY=\");\n_c = PlaceAutocompleteComponent;\nexport default PlaceAutocompleteComponent;\nvar _c;\n$RefreshReg$(_c, \"PlaceAutocompleteComponent\");","map":{"version":3,"names":["useEffect","useRef","useState","jsxDEV","_jsxDEV","GOOGLE_API_KEY","PlaceAutocompleteComponent","_s","autocompleteContainerRef","selectedPlace","setSelectedPlace","loadGoogleMaps","window","google","maps","initializeAutocomplete","importLibrary","console","log","placeAutocomplete","places","PlaceAutocompleteElement","current","innerHTML","appendChild","addEventListener","place","fetchFields","fields","toJSON","error","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","style","marginTop","JSON","stringify","_c","$RefreshReg$"],"sources":["/Users/ag/Desktop/SelectTourney/select-tourney/src/components/google/PlacesAutoComplete.js"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\n\nconst GOOGLE_API_KEY = \"AIzaSyDsb32EFWC9jVcxoQe6chZ55HRU6ibVC6Y\"; // Store in environment variables\n\nconst PlaceAutocompleteComponent = () => {\n  const autocompleteContainerRef = useRef(null);\n  const [selectedPlace, setSelectedPlace] = useState(null);\n\n  useEffect(() => {\n    // ✅ Load Google Maps Places API dynamically\n    const loadGoogleMaps = async () => {\n      if (window.google && window.google.maps) {\n        initializeAutocomplete();\n        return;\n      }\n\n      // const script = document.createElement(\"script\");\n      // script.src = `https://maps.googleapis.com/maps/api/js?key=${GOOGLE_API_KEY}&libraries=places`;\n      // script.async = true;\n      // script.defer = true;\n      // script.onload = initializeAutocomplete;\n      // document.body.appendChild(script);\n    };\n\n    // ✅ Initialize PlaceAutocompleteElement\n    const initializeAutocomplete = async () => {\n      try {\n        // @ts-ignore\n        await window.google.maps.importLibrary(\"places\");\n        console.log('%csrc/components/google/PlacesAutoComplete.js:30 window.google.maps.places', 'color: #007acc;', window.google.maps);\n        // ✅ Create and append the PlaceAutocompleteElement\n        // @ts-ignore\n        const placeAutocomplete = new window.google.maps.places.PlaceAutocompleteElement();\n\n        if (autocompleteContainerRef.current) {\n          autocompleteContainerRef.current.innerHTML = \"\"; // Clear previous instances\n          autocompleteContainerRef.current.appendChild(placeAutocomplete);\n        }\n\n        // ✅ Listen for place selection\n        // @ts-ignore\n        placeAutocomplete.addEventListener(\"gmp-placeselect\", async ({ place }) => {\n          await place.fetchFields({\n            fields: [\"displayName\", \"formattedAddress\", \"location\"],\n          });\n\n          setSelectedPlace(place.toJSON());\n        });\n      } catch (error) {\n        console.error(\"Google Maps API failed to load:\", error);\n      }\n    };\n\n    loadGoogleMaps();\n  }, []);\n\n  return (\n    <div>\n      <h2>Google Places Autocomplete</h2>\n      {/* Container for Google Places input */}\n      <div ref={autocompleteContainerRef}></div>\n\n      {/* Display Selected Place Info */}\n      {selectedPlace && (\n        <div style={{ marginTop: \"20px\" }}>\n          <h3>Selected Place:</h3>\n          <pre>{JSON.stringify(selectedPlace, null, 2)}</pre>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PlaceAutocompleteComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}