{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport { POSITION_LEFT, POSITION_RIGHT } from '../constants';\nimport { applyToPoints, inverse } from 'transformation-matrix';\nimport MiniatureToggleButton from './miniature-toggle-button';\nimport MiniatureMask from './miniature-mask';\nconst DEFAULT_BACKGROUND = \"#616264\";\nexport default function Miniature(_ref) {\n  let {\n    value,\n    onChangeValue,\n    children,\n    SVGBackground,\n    background = DEFAULT_BACKGROUND,\n    position = POSITION_LEFT,\n    width: miniatureWidth = 100,\n    height: miniatureHeight = 80\n  } = _ref;\n  let {\n    SVGMinX,\n    SVGMinY,\n    SVGWidth,\n    SVGHeight,\n    viewerWidth,\n    viewerHeight\n  } = value;\n  let ratio = SVGHeight / SVGWidth;\n  let zoomToFit = ratio >= 1 ? miniatureHeight / SVGHeight : miniatureWidth / SVGWidth;\n  let [{\n    x: x1,\n    y: y1\n  }, {\n    x: x2,\n    y: y2\n  }] = applyToPoints(inverse(value), [{\n    x: 0,\n    y: 0\n  }, {\n    x: viewerWidth,\n    y: viewerHeight\n  }]);\n  let width, height;\n  if (value.miniatureOpen) {\n    width = miniatureWidth;\n    height = miniatureHeight;\n  } else {\n    width = 24;\n    height = 24;\n  }\n  let style = {\n    position: \"absolute\",\n    overflow: \"hidden\",\n    outline: \"1px solid rgba(19, 20, 22, 0.90)\",\n    transition: \"width 200ms ease, height 200ms ease, bottom 200ms ease\",\n    width: width + \"px\",\n    height: height + \"px\",\n    bottom: \"6px\",\n    [position === POSITION_LEFT ? 'left' : 'right']: \"6px\",\n    background\n  };\n  let centerTranslation = ratio >= 1 ? `translate(${(miniatureWidth - SVGWidth * zoomToFit) / 2 - SVGMinX * zoomToFit}, ${-SVGMinY * zoomToFit})` : `translate(${-SVGMinX * zoomToFit}, ${(miniatureHeight - SVGHeight * zoomToFit) / 2 - SVGMinY * zoomToFit})`;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    role: \"navigation\",\n    style: style\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    width: miniatureWidth,\n    height: miniatureHeight,\n    style: {\n      pointerEvents: \"none\"\n    }\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    transform: centerTranslation\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    transform: `scale(${zoomToFit}, ${zoomToFit})`\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    fill: SVGBackground,\n    x: SVGMinX,\n    y: SVGMinY,\n    width: SVGWidth,\n    height: SVGHeight\n  }), children, /*#__PURE__*/React.createElement(MiniatureMask, {\n    SVGWidth: SVGWidth,\n    SVGHeight: SVGHeight,\n    SVGMinX: SVGMinX,\n    SVGMinY: SVGMinY,\n    x1: x1,\n    y1: y1,\n    x2: x2,\n    y2: y2,\n    zoomToFit: zoomToFit\n  })))), /*#__PURE__*/React.createElement(MiniatureToggleButton, {\n    value: value,\n    onChangeValue: onChangeValue,\n    position: position\n  }));\n}\nMiniature.propTypes = {\n  value: PropTypes.object.isRequired,\n  onChangeValue: PropTypes.func.isRequired,\n  SVGBackground: PropTypes.string.isRequired,\n  //customizations\n  position: PropTypes.oneOf([POSITION_RIGHT, POSITION_LEFT]),\n  background: PropTypes.string,\n  width: PropTypes.number,\n  height: PropTypes.number\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}