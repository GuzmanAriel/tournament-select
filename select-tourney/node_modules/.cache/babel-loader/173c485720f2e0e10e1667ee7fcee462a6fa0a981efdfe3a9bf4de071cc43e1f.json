{"ast":null,"code":"/**\n * Merge multiple matrices into one\n * @param matrices {...Matrix | Matrix[]} Matrices listed as separate parameters or in an array\n * @returns {Matrix} Affine Matrix\n */\nexport function transform(...matrices) {\n  matrices = Array.isArray(matrices[0]) ? matrices[0] : matrices;\n  const multiply = (m1, m2) => {\n    return {\n      a: m1.a * m2.a + m1.c * m2.b,\n      c: m1.a * m2.c + m1.c * m2.d,\n      e: m1.a * m2.e + m1.c * m2.f + m1.e,\n      b: m1.b * m2.a + m1.d * m2.b,\n      d: m1.b * m2.c + m1.d * m2.d,\n      f: m1.b * m2.e + m1.d * m2.f + m1.f\n    };\n  };\n  switch (matrices.length) {\n    case 0:\n      throw new Error('no matrices provided');\n    case 1:\n      return matrices[0];\n    case 2:\n      return multiply(matrices[0], matrices[1]);\n    default:\n      {\n        const [m1, m2, ...rest] = matrices;\n        const m = multiply(m1, m2);\n        return transform(m, ...rest);\n      }\n  }\n}\n\n/**\n * Merge multiple matrices into one\n * @param matrices {...Matrix | Matrix[]} Matrices listed as separate parameters or in an array\n * @returns {Matrix} Affine Matrix\n */\nexport function compose(...matrices) {\n  return transform(...matrices);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}