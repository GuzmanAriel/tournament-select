{"ast":null,"code":"var _jsxFileName = \"/Users/ag/Desktop/SelectTourney/select-tourney/src/components/google/PlacesAutoComplete.js\",\n  _s = $RefreshSig$();\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from \"use-places-autocomplete\";\nimport useOnclickOutside from \"react-cool-onclickoutside\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlacesAutocomplete = () => {\n  _s();\n  const GOOGLE_API_KEY = \"AIzaSyDsb32EFWC9jVcxoQe6chZ55HRU6ibVC6Y\";\n  useEffect(() => {\n    if (window.google && window.google.maps) {\n      initializeAutocomplete();\n      return;\n    }\n    const script = document.createElement(\"script\");\n    script.src = `https://maps.googleapis.com/maps/api/js?key=${GOOGLE_API_KEY}&libraries=places`;\n    script.async = true;\n    script.defer = true;\n    script.onload = initializeAutocomplete;\n    document.body.appendChild(script);\n  }, []);\n  const {\n    ready,\n    value,\n    suggestions: {\n      status,\n      data\n    },\n    setValue,\n    clearSuggestions\n  } = usePlacesAutocomplete({\n    callbackName: \"YOUR_CALLBACK_NAME\",\n    requestOptions: {\n      /* Define search scope here */\n    },\n    debounce: 300\n  });\n  const ref = useOnclickOutside(() => {\n    // When the user clicks outside of the component, we can dismiss\n    // the searched suggestions by calling this method\n    clearSuggestions();\n  });\n  const handleInput = e => {\n    // Update the keyword of the input element\n    setValue(e.target.value);\n  };\n  const handleSelect = ({\n    description\n  }) => () => {\n    // When the user selects a place, we can replace the keyword without request data from API\n    // by setting the second parameter to \"false\"\n    setValue(description, false);\n    clearSuggestions();\n\n    // Get latitude and longitude via utility functions\n    getGeocode({\n      address: description\n    }).then(results => {\n      const {\n        lat,\n        lng\n      } = getLatLng(results[0]);\n      console.log(\"📍 Coordinates: \", {\n        lat,\n        lng\n      });\n    });\n  };\n  const renderSuggestions = () => data.map(suggestion => {\n    const {\n      place_id,\n      structured_formatting: {\n        main_text,\n        secondary_text\n      }\n    } = suggestion;\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      onClick: handleSelect(suggestion),\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: main_text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"small\", {\n        children: secondary_text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 42\n      }, this)]\n    }, place_id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ref,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      value: value,\n      onChange: handleInput,\n      disabled: !ready,\n      placeholder: \"Where are you going?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this), status === \"OK\" && /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: renderSuggestions()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 7\n  }, this);\n};\n_s(PlacesAutocomplete, \"XsjIa1FzQMKk2TTas28RzHAKXZ4=\", false, function () {\n  return [usePlacesAutocomplete, useOnclickOutside];\n});\n_c = PlacesAutocomplete;\nexport default PlacesAutocomplete;\nvar _c;\n$RefreshReg$(_c, \"PlacesAutocomplete\");","map":{"version":3,"names":["usePlacesAutocomplete","getGeocode","getLatLng","useOnclickOutside","jsxDEV","_jsxDEV","PlacesAutocomplete","_s","GOOGLE_API_KEY","useEffect","window","google","maps","initializeAutocomplete","script","document","createElement","src","async","defer","onload","body","appendChild","ready","value","suggestions","status","data","setValue","clearSuggestions","callbackName","requestOptions","debounce","ref","handleInput","e","target","handleSelect","description","address","then","results","lat","lng","console","log","renderSuggestions","map","suggestion","place_id","structured_formatting","main_text","secondary_text","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","disabled","placeholder","_c","$RefreshReg$"],"sources":["/Users/ag/Desktop/SelectTourney/select-tourney/src/components/google/PlacesAutoComplete.js"],"sourcesContent":["import usePlacesAutocomplete, {\n    getGeocode,\n    getLatLng,\n  } from \"use-places-autocomplete\";\n  import useOnclickOutside from \"react-cool-onclickoutside\";\n  \n  const PlacesAutocomplete = () => {\n    const GOOGLE_API_KEY = \"AIzaSyDsb32EFWC9jVcxoQe6chZ55HRU6ibVC6Y\"; \n    useEffect(() => {\n    \n        if (window.google && window.google.maps) {\n          initializeAutocomplete();\n          return;\n        }\n  \n        const script = document.createElement(\"script\");\n        script.src = `https://maps.googleapis.com/maps/api/js?key=${GOOGLE_API_KEY}&libraries=places`;\n        script.async = true;\n        script.defer = true;\n        script.onload = initializeAutocomplete;\n        document.body.appendChild(script);\n    }, []);\n\n    const {\n      ready,\n      value,\n      suggestions: { status, data },\n      setValue,\n      clearSuggestions,\n    } = usePlacesAutocomplete({\n      callbackName: \"YOUR_CALLBACK_NAME\",\n      requestOptions: {\n        /* Define search scope here */\n      },\n      debounce: 300,\n    });\n    const ref = useOnclickOutside(() => {\n      // When the user clicks outside of the component, we can dismiss\n      // the searched suggestions by calling this method\n      clearSuggestions();\n    });\n  \n    const handleInput = (e) => {\n      // Update the keyword of the input element\n      setValue(e.target.value);\n    };\n  \n    const handleSelect =\n      ({ description }) =>\n      () => {\n        // When the user selects a place, we can replace the keyword without request data from API\n        // by setting the second parameter to \"false\"\n        setValue(description, false);\n        clearSuggestions();\n  \n        // Get latitude and longitude via utility functions\n        getGeocode({ address: description }).then((results) => {\n          const { lat, lng } = getLatLng(results[0]);\n          console.log(\"📍 Coordinates: \", { lat, lng });\n        });\n      };\n  \n    const renderSuggestions = () =>\n      data.map((suggestion) => {\n        const {\n          place_id,\n          structured_formatting: { main_text, secondary_text },\n        } = suggestion;\n  \n        return (\n          <li key={place_id} onClick={handleSelect(suggestion)}>\n            <strong>{main_text}</strong> <small>{secondary_text}</small>\n          </li>\n        );\n      });\n  \n    return (\n      <div ref={ref}>\n        <input\n          value={value}\n          onChange={handleInput}\n          disabled={!ready}\n          placeholder=\"Where are you going?\"\n        />\n        {/* We can use the \"status\" to decide whether we should display the dropdown or not */}\n        {status === \"OK\" && <ul>{renderSuggestions()}</ul>}\n      </div>\n    );\n  };\n\n  export default PlacesAutocomplete;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}