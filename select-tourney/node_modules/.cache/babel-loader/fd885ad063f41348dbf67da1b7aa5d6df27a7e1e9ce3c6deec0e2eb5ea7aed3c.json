{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { createContext, useReducer } from 'react';\nconst initialState = {\n  hoveredMatchId: null,\n  hoveredPartyId: null,\n  hoveredColumnIndex: null,\n  hoveredRowIndex: null\n};\nconst store = createContext(initialState);\nconst {\n  Provider\n} = store;\nconst MatchContextProvider = ({\n  children\n}) => {\n  const [state, dispatch] = useReducer((previousState, action) => {\n    var _a;\n    switch (action.type) {\n      case 'SET_HOVERED_PARTYID':\n        {\n          const {\n            partyId,\n            columnIndex,\n            rowIndex,\n            matchId\n          } = (_a = action.payload) !== null && _a !== void 0 ? _a : {};\n          return Object.assign(Object.assign({}, previousState), {\n            hoveredPartyId: partyId,\n            hoveredColumnIndex: columnIndex,\n            hoveredRowIndex: rowIndex,\n            hoveredMatchId: matchId\n          });\n        }\n      default:\n        throw new Error();\n    }\n  }, initialState);\n  return _jsx(Provider, Object.assign({\n    value: {\n      state,\n      dispatch\n    }\n  }, {\n    children: children\n  }));\n};\nexport { store as matchContext, MatchContextProvider };\n//# sourceMappingURL=match-context.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}