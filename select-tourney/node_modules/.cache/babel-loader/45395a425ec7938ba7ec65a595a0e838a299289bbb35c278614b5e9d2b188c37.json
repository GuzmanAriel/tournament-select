{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { baseUrl } from '../../app/shared/baseUrl';\nexport const fetchAllTournamentData = createAsyncThunk('tournaments/fetchAllTournamentData', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch(baseUrl);\n    if (!response.ok) {\n      throw new Error(`Unable to fetch, status: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nconst initialState = {\n  tournaments: [],\n  teams: [],\n  pools: [],\n  brackets: [],\n  isLoading: true,\n  errMsg: ''\n};\nconst tournamentsSlice = createSlice({\n  name: 'tournaments',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchAllTournamentData.pending, state => {\n      state.isLoading = true;\n    }).addCase(fetchAllTournamentData.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.errMsg = '';\n      state.tournaments = action.payload.tournaments;\n      state.teams = action.payload.teams;\n      state.pools = action.payload.pools;\n      state.brackets = action.payload.brackets;\n    }).addCase(fetchAllTournamentData.rejected, (state, action) => {\n      state.isLoading = false;\n      state.errMsg = action.payload || 'Fetch failed';\n    });\n  }\n});\nexport const tournamentsReducer = tournamentsSlice.reducer;\n\n// Selectors\nexport const selectAllTournaments = state => state.tournaments.tournaments;\nexport const selectTournamentById = id => state => state.tournaments.tournaments.find(t => t.id === parseInt(id));\nexport const selectTeamsByTournamentId = id => state => state.tournaments.teams.filter(t => t.tournamentId === parseInt(id));\nexport const selectPoolsByTournamentId = id => state => state.tournaments.pools.filter(p => p.tournamentId === parseInt(id));\nexport const selectBracketsByTournamentId = id => state => state.tournaments.brackets.filter(b => b.tournamentId === parseInt(id));\nexport const selectUpcomingTournaments = state => {\n  const today = new Date().toISOString();\n  return state.tournaments.tournaments.filter(t => t.date_utc > today);\n};\nexport const selectPastTournaments = state => {\n  const today = new Date().toISOString();\n  return state.tournaments.tournaments.filter(t => t.date_utc < today);\n};\nexport const selectCurrentTournaments = state => {\n  const today = new Date().toISOString().split('T')[0];\n  return state.tournaments.tournaments.filter(t => t.date_utc.startsWith(today));\n};\nexport const selectFeaturedTournaments = state => state.tournaments.tournaments.filter(t => t.is_featured);","map":{"version":3,"names":["createSlice","createAsyncThunk","baseUrl","fetchAllTournamentData","_","rejectWithValue","response","fetch","ok","Error","status","json","error","message","initialState","tournaments","teams","pools","brackets","isLoading","errMsg","tournamentsSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","tournamentsReducer","reducer","selectAllTournaments","selectTournamentById","id","find","t","parseInt","selectTeamsByTournamentId","filter","tournamentId","selectPoolsByTournamentId","p","selectBracketsByTournamentId","b","selectUpcomingTournaments","today","Date","toISOString","date_utc","selectPastTournaments","selectCurrentTournaments","split","startsWith","selectFeaturedTournaments","is_featured"],"sources":["/Users/ag/Desktop/SelectTourney/select-tourney/src/features/tournaments/tournamentsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { baseUrl } from '../../app/shared/baseUrl';\n\nexport const fetchAllTournamentData = createAsyncThunk(\n    'tournaments/fetchAllTournamentData',\n    async (_, { rejectWithValue }) => {\n        try {\n            const response = await fetch(baseUrl);\n            if (!response.ok) {\n                throw new Error(`Unable to fetch, status: ${response.status}`);\n            }\n            return await response.json();\n        } catch (error) {\n            return rejectWithValue(error.message);\n        }\n    }\n);\n\nconst initialState = {\n    tournaments: [],\n    teams: [],\n    pools: [],\n    brackets: [],\n    isLoading: true,\n    errMsg: ''\n};\n\nconst tournamentsSlice = createSlice({\n    name: 'tournaments',\n    initialState,\n    reducers: {},\n    extraReducers: (builder) => {\n        builder\n            .addCase(fetchAllTournamentData.pending, (state) => {\n                state.isLoading = true;\n            })\n            .addCase(fetchAllTournamentData.fulfilled, (state, action) => {\n                state.isLoading = false;\n                state.errMsg = '';\n                state.tournaments = action.payload.tournaments;\n                state.teams = action.payload.teams;\n                state.pools = action.payload.pools;\n                state.brackets = action.payload.brackets;\n            })\n            .addCase(fetchAllTournamentData.rejected, (state, action) => {\n                state.isLoading = false;\n                state.errMsg = action.payload || 'Fetch failed';\n            });\n    }\n});\n\nexport const tournamentsReducer = tournamentsSlice.reducer;\n\n// Selectors\nexport const selectAllTournaments = (state) => state.tournaments.tournaments;\n\nexport const selectTournamentById = (id) => (state) =>\n    state.tournaments.tournaments.find(t => t.id === parseInt(id));\n\nexport const selectTeamsByTournamentId = (id) => (state) =>\n    state.tournaments.teams.filter(t => t.tournamentId === parseInt(id));\n\nexport const selectPoolsByTournamentId = (id) => (state) =>\n    state.tournaments.pools.filter(p => p.tournamentId === parseInt(id));\n\nexport const selectBracketsByTournamentId = (id) => (state) =>\n    state.tournaments.brackets.filter(b => b.tournamentId === parseInt(id));\n\nexport const selectUpcomingTournaments = (state) => {\n    const today = new Date().toISOString();\n    return state.tournaments.tournaments.filter(t => t.date_utc > today);\n};\n\nexport const selectPastTournaments = (state) => {\n    const today = new Date().toISOString();\n    return state.tournaments.tournaments.filter(t => t.date_utc < today);\n};\n\nexport const selectCurrentTournaments = (state) => {\n    const today = new Date().toISOString().split('T')[0];\n    return state.tournaments.tournaments.filter(t => t.date_utc.startsWith(today));\n};\n\nexport const selectFeaturedTournaments = (state) =>\n    state.tournaments.tournaments.filter(t => t.is_featured);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}