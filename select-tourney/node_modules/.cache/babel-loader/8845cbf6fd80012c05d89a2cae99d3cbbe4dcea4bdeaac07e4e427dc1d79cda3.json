{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TOOL_NONE, TOOL_PAN, TOOL_ZOOM_IN, TOOL_ZOOM_OUT, POSITION_TOP, POSITION_RIGHT, POSITION_BOTTOM, POSITION_LEFT, ALIGN_CENTER, ALIGN_LEFT, ALIGN_RIGHT, ALIGN_TOP, ALIGN_BOTTOM } from '../constants';\nimport { fitToViewer } from '../features/zoom';\nimport IconCursor from './icon-cursor';\nimport IconPan from './icon-pan';\nimport IconZoomIn from './icon-zoom-in';\nimport IconZoomOut from './icon-zoom-out';\nimport IconFit from './icon-fit';\nimport ToolbarButton from './toolbar-button';\nconst DEFAULT_ACTIVE_TOOL_COLOR = '#1CA6FC';\nexport default function Toolbar(_ref) {\n  let {\n    tool,\n    value,\n    onChangeValue,\n    onChangeTool,\n    activeToolColor = DEFAULT_ACTIVE_TOOL_COLOR,\n    position = POSITION_RIGHT,\n    SVGAlignX = ALIGN_LEFT,\n    SVGAlignY = ALIGN_TOP\n  } = _ref;\n  let handleChangeTool = (event, tool) => {\n    onChangeTool(tool);\n    event.stopPropagation();\n    event.preventDefault();\n  };\n  let handleFit = event => {\n    onChangeValue(fitToViewer(value, SVGAlignX, SVGAlignY));\n    event.stopPropagation();\n    event.preventDefault();\n  };\n  let isHorizontal = [POSITION_TOP, POSITION_BOTTOM].indexOf(position) >= 0;\n  let style = {\n    //position\n    position: \"absolute\",\n    transform: [POSITION_TOP, POSITION_BOTTOM].indexOf(position) >= 0 ? \"translate(-50%, 0px)\" : \"none\",\n    top: [POSITION_LEFT, POSITION_RIGHT, POSITION_TOP].indexOf(position) >= 0 ? \"5px\" : \"unset\",\n    left: [POSITION_TOP, POSITION_BOTTOM].indexOf(position) >= 0 ? \"50%\" : POSITION_LEFT === position ? \"5px\" : \"unset\",\n    right: [POSITION_RIGHT].indexOf(position) >= 0 ? \"5px\" : \"unset\",\n    bottom: [POSITION_BOTTOM].indexOf(position) >= 0 ? \"5px\" : \"unset\",\n    //inner styling\n    backgroundColor: \"rgba(19, 20, 22, 0.90)\",\n    borderRadius: \"2px\",\n    display: \"flex\",\n    flexDirection: isHorizontal ? \"row\" : \"column\",\n    padding: isHorizontal ? \"1px 2px\" : \"2px 1px\"\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: style,\n    role: \"toolbar\"\n  }, /*#__PURE__*/React.createElement(ToolbarButton, {\n    toolbarPosition: position,\n    active: tool === TOOL_NONE,\n    activeColor: activeToolColor,\n    name: \"unselect-tools\",\n    title: \"Selection\",\n    onClick: event => handleChangeTool(event, TOOL_NONE)\n  }, /*#__PURE__*/React.createElement(IconCursor, null)), /*#__PURE__*/React.createElement(ToolbarButton, {\n    toolbarPosition: position,\n    active: tool === TOOL_PAN,\n    activeColor: activeToolColor,\n    name: \"select-tool-pan\",\n    title: \"Pan\",\n    onClick: event => handleChangeTool(event, TOOL_PAN)\n  }, /*#__PURE__*/React.createElement(IconPan, null)), /*#__PURE__*/React.createElement(ToolbarButton, {\n    toolbarPosition: position,\n    active: tool === TOOL_ZOOM_IN,\n    activeColor: activeToolColor,\n    name: \"select-tool-zoom-in\",\n    title: \"Zoom in\",\n    onClick: event => handleChangeTool(event, TOOL_ZOOM_IN)\n  }, /*#__PURE__*/React.createElement(IconZoomIn, null)), /*#__PURE__*/React.createElement(ToolbarButton, {\n    toolbarPosition: position,\n    active: tool === TOOL_ZOOM_OUT,\n    activeColor: activeToolColor,\n    name: \"select-tool-zoom-out\",\n    title: \"Zoom out\",\n    onClick: event => handleChangeTool(event, TOOL_ZOOM_OUT)\n  }, /*#__PURE__*/React.createElement(IconZoomOut, null)), /*#__PURE__*/React.createElement(ToolbarButton, {\n    toolbarPosition: position,\n    active: false,\n    activeColor: activeToolColor,\n    name: \"fit-to-viewer\",\n    title: \"Fit to viewer\",\n    onClick: event => handleFit(event)\n  }, /*#__PURE__*/React.createElement(IconFit, null)));\n}\nToolbar.propTypes = {\n  tool: PropTypes.string.isRequired,\n  onChangeTool: PropTypes.func.isRequired,\n  value: PropTypes.object.isRequired,\n  onChangeValue: PropTypes.func.isRequired,\n  //customizations\n  position: PropTypes.oneOf([POSITION_TOP, POSITION_RIGHT, POSITION_BOTTOM, POSITION_LEFT]),\n  SVGAlignX: PropTypes.oneOf([ALIGN_CENTER, ALIGN_LEFT, ALIGN_RIGHT]),\n  SVGAlignY: PropTypes.oneOf([ALIGN_CENTER, ALIGN_TOP, ALIGN_BOTTOM]),\n  activeToolColor: PropTypes.string\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}