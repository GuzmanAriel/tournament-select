{"ast":null,"code":"import { sortAlphanumerically } from '../utils/string';\nexport const generatePreviousRound = (matchesColumn, listOfMatches) => matchesColumn.reduce((result, match) => {\n  return [...result, ...listOfMatches.filter(m => m.nextMatchId === match.id).sort((a, b) => sortAlphanumerically(a.name, b.name))];\n}, []);\nexport function getPreviousMatches(columnIndex, columns, previousBottomPosition) {\n  const previousTopMatch = columnIndex !== 0 && columns[columnIndex - 1][previousBottomPosition - 1];\n  const previousBottomMatch = columnIndex !== 0 && columns[columnIndex - 1][previousBottomPosition];\n  return {\n    previousTopMatch,\n    previousBottomMatch\n  };\n}\nexport function sortTeamsSeedOrder(previousBottomMatch) {\n  return (partyA, partyB) => {\n    var _a, _b;\n    const partyAInBottomMatch = (_a = previousBottomMatch === null || previousBottomMatch === void 0 ? void 0 : previousBottomMatch.participants) === null || _a === void 0 ? void 0 : _a.find(p => p.id === partyA.id);\n    const partyBInBottomMatch = (_b = previousBottomMatch === null || previousBottomMatch === void 0 ? void 0 : previousBottomMatch.participants) === null || _b === void 0 ? void 0 : _b.find(p => p.id === partyB.id);\n    if (partyAInBottomMatch) {\n      return 1;\n    }\n    if (partyBInBottomMatch) {\n      return -1;\n    }\n    return 0;\n  };\n}\n//# sourceMappingURL=match-functions.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}