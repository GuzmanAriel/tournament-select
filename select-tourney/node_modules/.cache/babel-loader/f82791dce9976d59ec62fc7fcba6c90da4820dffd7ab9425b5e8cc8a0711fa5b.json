{"ast":null,"code":"import moment from \"moment\";\nexport const validateCreateTournamentForms = values => {\n  const errors = {};\n\n  // Name Validation\n  if (!values.name) {\n    errors.name = \"Tournament name is required\";\n  } else if (values.name.length < 2) {\n    errors.name = \"Tournament name must be at least 2 characters\";\n  } else if (values.name.length > 30) {\n    errors.name = \"Tournament name cannot be more than 30 characters\";\n  }\n\n  // Date Validation (Must be after today)\n  if (!values.date) {\n    errors.date = \"Date is required\";\n  } else if (!moment(values.date).isAfter(moment(), \"day\")) {\n    errors.date = \"Date must be after today\";\n  }\n\n  // Location Validation\n  if (!values.location) {\n    errors.location = \"Location is required\";\n  } else if (values.location.length < 5) {\n    errors.location = \"Please enter a valid address\";\n  }\n\n  // Tournament Type Validation\n  if (!values.tournamentType) {\n    errors.tournamentType = \"Tournament type is required\";\n  }\n\n  // Playoff Type Validation\n  if (!values.playoffType) {\n    errors.playoffType = \"Playoff type is required\";\n  }\n\n  // Playoff Bracket Number Validation\n  if (!values.playoffBracketNumber) {\n    errors.playoffBracketNumber = \"Playoff bracket number is required\";\n  } else if (isNaN(values.playoffBracketNumber)) {\n    errors.playoffBracketNumber = \"Must be a number\";\n  }\n\n  // First Place Prize Validation (Only required if 'prizes' is true)\n  if (values.prizes === true && !values.firstPlacePrize) {\n    errors.firstPlacePrize = \"First place prize is required if prizes are offered\";\n  }\n  return errors; // Return all validation errors\n};","map":{"version":3,"names":["moment","validateCreateTournamentForms","values","errors","name","length","date","isAfter","location","tournamentType","playoffType","playoffBracketNumber","isNaN","prizes","firstPlacePrize"],"sources":["/Users/ag/Desktop/SelectTourney/select-tourney/src/utils/tournaments/validateCreateTournamentForm.js"],"sourcesContent":["import moment from \"moment\";\n\nexport const validateCreateTournamentForms = (values) => {\n    const errors = {};\n\n    // Name Validation\n    if (!values.name) {\n        errors.name = \"Tournament name is required\";\n    } else if (values.name.length < 2) {\n        errors.name = \"Tournament name must be at least 2 characters\";\n    } else if (values.name.length > 30) {\n        errors.name = \"Tournament name cannot be more than 30 characters\";\n    }\n\n    // Date Validation (Must be after today)\n    if (!values.date) {\n        errors.date = \"Date is required\";\n    } else if (!moment(values.date).isAfter(moment(), \"day\")) {\n        errors.date = \"Date must be after today\";\n    }\n\n    // Location Validation\n    if (!values.location) {\n        errors.location = \"Location is required\";\n    } else if (values.location.length < 5) {\n        errors.location = \"Please enter a valid address\";\n    }\n\n    // Tournament Type Validation\n    if (!values.tournamentType) {\n        errors.tournamentType = \"Tournament type is required\";\n    }\n\n    // Playoff Type Validation\n    if (!values.playoffType) {\n        errors.playoffType = \"Playoff type is required\";\n    }\n\n    // Playoff Bracket Number Validation\n    if (!values.playoffBracketNumber) {\n        errors.playoffBracketNumber = \"Playoff bracket number is required\";\n    } else if (isNaN(values.playoffBracketNumber)) {\n        errors.playoffBracketNumber = \"Must be a number\";\n    }\n\n    // First Place Prize Validation (Only required if 'prizes' is true)\n    if (values.prizes === true && !values.firstPlacePrize) {\n        errors.firstPlacePrize = \"First place prize is required if prizes are offered\";\n    }\n\n    return errors; // Return all validation errors\n};\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,QAAQ;AAE3B,OAAO,MAAMC,6BAA6B,GAAIC,MAAM,IAAK;EACrD,MAAMC,MAAM,GAAG,CAAC,CAAC;;EAEjB;EACA,IAAI,CAACD,MAAM,CAACE,IAAI,EAAE;IACdD,MAAM,CAACC,IAAI,GAAG,6BAA6B;EAC/C,CAAC,MAAM,IAAIF,MAAM,CAACE,IAAI,CAACC,MAAM,GAAG,CAAC,EAAE;IAC/BF,MAAM,CAACC,IAAI,GAAG,+CAA+C;EACjE,CAAC,MAAM,IAAIF,MAAM,CAACE,IAAI,CAACC,MAAM,GAAG,EAAE,EAAE;IAChCF,MAAM,CAACC,IAAI,GAAG,mDAAmD;EACrE;;EAEA;EACA,IAAI,CAACF,MAAM,CAACI,IAAI,EAAE;IACdH,MAAM,CAACG,IAAI,GAAG,kBAAkB;EACpC,CAAC,MAAM,IAAI,CAACN,MAAM,CAACE,MAAM,CAACI,IAAI,CAAC,CAACC,OAAO,CAACP,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE;IACtDG,MAAM,CAACG,IAAI,GAAG,0BAA0B;EAC5C;;EAEA;EACA,IAAI,CAACJ,MAAM,CAACM,QAAQ,EAAE;IAClBL,MAAM,CAACK,QAAQ,GAAG,sBAAsB;EAC5C,CAAC,MAAM,IAAIN,MAAM,CAACM,QAAQ,CAACH,MAAM,GAAG,CAAC,EAAE;IACnCF,MAAM,CAACK,QAAQ,GAAG,8BAA8B;EACpD;;EAEA;EACA,IAAI,CAACN,MAAM,CAACO,cAAc,EAAE;IACxBN,MAAM,CAACM,cAAc,GAAG,6BAA6B;EACzD;;EAEA;EACA,IAAI,CAACP,MAAM,CAACQ,WAAW,EAAE;IACrBP,MAAM,CAACO,WAAW,GAAG,0BAA0B;EACnD;;EAEA;EACA,IAAI,CAACR,MAAM,CAACS,oBAAoB,EAAE;IAC9BR,MAAM,CAACQ,oBAAoB,GAAG,oCAAoC;EACtE,CAAC,MAAM,IAAIC,KAAK,CAACV,MAAM,CAACS,oBAAoB,CAAC,EAAE;IAC3CR,MAAM,CAACQ,oBAAoB,GAAG,kBAAkB;EACpD;;EAEA;EACA,IAAIT,MAAM,CAACW,MAAM,KAAK,IAAI,IAAI,CAACX,MAAM,CAACY,eAAe,EAAE;IACnDX,MAAM,CAACW,eAAe,GAAG,qDAAqD;EAClF;EAEA,OAAOX,MAAM,CAAC,CAAC;AACnB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}