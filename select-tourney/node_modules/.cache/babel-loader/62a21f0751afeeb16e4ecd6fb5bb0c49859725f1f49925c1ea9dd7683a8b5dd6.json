{"ast":null,"code":"var _jsxFileName = \"/Users/ag/Desktop/SelectTourney/select-tourney/src/components/google/PlacesAutoComplete.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlaceAutocomplete = ({\n  onPlaceSelect\n}) => {\n  _s();\n  const [placeAutocomplete, setPlaceAutocomplete] = useState(null);\n  const inputRef = useRef(null);\n  const places = useMapsLibrary(\"places\");\n  useEffect(() => {\n    if (!places || !inputRef.current) return;\n    const options = {\n      fields: [\"geometry\", \"name\", \"formatted_address\"]\n    };\n    setPlaceAutocomplete(new places.Autocomplete(inputRef.current, options));\n  }, [places]);\n  useEffect(() => {\n    if (!placeAutocomplete) return;\n    placeAutocomplete.addListener(\"place_changed\", () => {\n      onPlaceSelect(placeAutocomplete.getPlace());\n    });\n  }, [onPlaceSelect, placeAutocomplete]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"autocomplete-container\",\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: inputRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 7\n  }, this);\n};\n_s(PlaceAutocomplete, \"qo1b2ACe0Y1vF+XsZV6GYid/c10=\", true);\n_c = PlaceAutocomplete;\nexport default PlaceAutocomplete;\nvar _c;\n$RefreshReg$(_c, \"PlaceAutocomplete\");","map":{"version":3,"names":["useEffect","useState","useRef","jsxDEV","_jsxDEV","PlaceAutocomplete","onPlaceSelect","_s","placeAutocomplete","setPlaceAutocomplete","inputRef","places","useMapsLibrary","current","options","fields","Autocomplete","addListener","getPlace","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ag/Desktop/SelectTourney/select-tourney/src/components/google/PlacesAutoComplete.js"],"sourcesContent":["import { useEffect, useState, useRef } from \"react\";\n\nconst PlaceAutocomplete = ({ onPlaceSelect }) => {\n    const [placeAutocomplete, setPlaceAutocomplete] = useState(null);\n    const inputRef = useRef(null);\n    const places = useMapsLibrary(\"places\");\n  \n    useEffect(() => {\n      if (!places || !inputRef.current) return;\n  \n      const options = {\n        fields: [\"geometry\", \"name\", \"formatted_address\"],\n      };\n  \n      setPlaceAutocomplete(new places.Autocomplete(inputRef.current, options));\n    }, [places]);\n    useEffect(() => {\n      if (!placeAutocomplete) return;\n  \n      placeAutocomplete.addListener(\"place_changed\", () => {\n        onPlaceSelect(placeAutocomplete.getPlace());\n      });\n    }, [onPlaceSelect, placeAutocomplete]);\n    return (\n      <div className=\"autocomplete-container\">\n        <input ref={inputRef} />\n      </div>\n    );\n  };\n\n  export default PlaceAutocomplete;"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,MAAMC,iBAAiB,GAAGA,CAAC;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAChE,MAAMS,QAAQ,GAAGR,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMS,MAAM,GAAGC,cAAc,CAAC,QAAQ,CAAC;EAEvCZ,SAAS,CAAC,MAAM;IACd,IAAI,CAACW,MAAM,IAAI,CAACD,QAAQ,CAACG,OAAO,EAAE;IAElC,MAAMC,OAAO,GAAG;MACdC,MAAM,EAAE,CAAC,UAAU,EAAE,MAAM,EAAE,mBAAmB;IAClD,CAAC;IAEDN,oBAAoB,CAAC,IAAIE,MAAM,CAACK,YAAY,CAACN,QAAQ,CAACG,OAAO,EAAEC,OAAO,CAAC,CAAC;EAC1E,CAAC,EAAE,CAACH,MAAM,CAAC,CAAC;EACZX,SAAS,CAAC,MAAM;IACd,IAAI,CAACQ,iBAAiB,EAAE;IAExBA,iBAAiB,CAACS,WAAW,CAAC,eAAe,EAAE,MAAM;MACnDX,aAAa,CAACE,iBAAiB,CAACU,QAAQ,CAAC,CAAC,CAAC;IAC7C,CAAC,CAAC;EACJ,CAAC,EAAE,CAACZ,aAAa,EAAEE,iBAAiB,CAAC,CAAC;EACtC,oBACEJ,OAAA;IAAKe,SAAS,EAAC,wBAAwB;IAAAC,QAAA,eACrChB,OAAA;MAAOiB,GAAG,EAAEX;IAAS;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrB,CAAC;AAEV,CAAC;AAAClB,EAAA,CA1BEF,iBAAiB;AAAAqB,EAAA,GAAjBrB,iBAAiB;AA4BrB,eAAeA,iBAAiB;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}