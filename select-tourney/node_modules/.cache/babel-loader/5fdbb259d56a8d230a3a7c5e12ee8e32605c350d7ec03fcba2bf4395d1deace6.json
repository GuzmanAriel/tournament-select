{"ast":null,"code":"function _extends() {\n  return _extends = Object.assign ? Object.assign.bind() : function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n    return n;\n  }, _extends.apply(null, arguments);\n}\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { toSVG } from 'transformation-matrix';\n//events\nimport eventFactory from './events/event-factory';\n//features\nimport { pan } from './features/pan';\nimport { getDefaultValue, isValueValid, reset, setPointOnViewerCenter, setSVGViewBox, setViewerSize, setZoomLevels } from './features/common';\nimport { onDoubleClick, onInterval, onMouseDown, onMouseEnterOrLeave, onMouseMove, onMouseUp, onWheel } from './features/interactions';\nimport parseViewBox from './utils/parseViewBox';\nimport { onTouchCancel, onTouchEnd, onTouchMove, onTouchStart } from './features/interactions-touch';\nimport { fitSelection, fitToViewer, zoom, zoomOnViewerCenter } from './features/zoom';\nimport { closeMiniature, openMiniature } from './features/miniature';\n//ui\nimport cursorPolyfill from './ui/cursor-polyfill';\nimport BorderGradient from './ui/border-gradient';\nimport Selection from './ui/selection';\nimport Toolbar from './ui-toolbar/toolbar';\nimport detectTouch from './ui/detect-touch';\nimport Miniature from './ui-miniature/miniature';\nimport { ACTION_PAN, ACTION_ZOOM, ALIGN_BOTTOM, ALIGN_CENTER, ALIGN_LEFT, ALIGN_RIGHT, ALIGN_TOP, MODE_IDLE, MODE_PANNING, MODE_ZOOMING, POSITION_BOTTOM, POSITION_LEFT, POSITION_NONE, POSITION_RIGHT, POSITION_TOP, TOOL_AUTO, TOOL_NONE, TOOL_PAN, TOOL_ZOOM_IN, TOOL_ZOOM_OUT } from './constants';\nimport { printMigrationTipsRelatedToProps } from \"./migration-tips\";\nexport default class ReactSVGPanZoom extends React.Component {\n  constructor(props, context) {\n    const {\n      width: viewerWidth,\n      height: viewerHeight,\n      scaleFactorMin,\n      scaleFactorMax,\n      children\n    } = props;\n    const {\n      viewBox: SVGViewBox\n    } = children.props;\n    let defaultValue;\n    if (SVGViewBox) {\n      const [SVGMinX, SVGMinY, SVGWidth, SVGHeight] = parseViewBox(SVGViewBox);\n      defaultValue = getDefaultValue(viewerWidth, viewerHeight, SVGMinX, SVGMinY, SVGWidth, SVGHeight, scaleFactorMin, scaleFactorMax);\n    } else {\n      const {\n        width: SVGWidth,\n        height: SVGHeight\n      } = children.props;\n      defaultValue = getDefaultValue(viewerWidth, viewerHeight, 0, 0, SVGWidth, SVGHeight, scaleFactorMin, scaleFactorMax);\n    }\n    super(props, context);\n    this.ViewerDOM = null;\n    this.state = {\n      pointerX: null,\n      pointerY: null,\n      defaultValue\n    };\n    this.autoPanLoop = this.autoPanLoop.bind(this);\n    this.onWheel = this.onWheel.bind(this);\n    if (process.env.NODE_ENV !== 'production') {\n      printMigrationTipsRelatedToProps(props);\n    }\n  }\n\n  /** React hooks **/\n  componentDidUpdate(prevProps) {\n    const value = this.getValue();\n    const props = this.props;\n    let nextValue = value;\n    let needUpdate = false;\n    if (process.env.NODE_ENV !== 'production') {\n      printMigrationTipsRelatedToProps(props);\n    }\n\n    // This block checks the size of the SVG\n    const {\n      viewBox: SVGViewBox\n    } = props.children.props;\n    if (SVGViewBox) {\n      // if the viewBox prop is specified\n      const [x, y, width, height] = parseViewBox(SVGViewBox);\n      if (value.SVGMinX !== x || value.SVGMinY !== y || value.SVGWidth !== width || value.SVGHeight !== height) {\n        nextValue = setSVGViewBox(nextValue, x, y, width, height);\n        needUpdate = true;\n      }\n    } else {\n      // if the width and height props are specified\n      const {\n        width: SVGWidth,\n        height: SVGHeight\n      } = props.children.props;\n      if (value.SVGWidth !== SVGWidth || value.SVGHeight !== SVGHeight) {\n        nextValue = setSVGViewBox(nextValue, 0, 0, SVGWidth, SVGHeight);\n        needUpdate = true;\n      }\n    }\n\n    // This block checks the size of the viewer\n    if (prevProps.width !== props.width || prevProps.height !== props.height) {\n      nextValue = setViewerSize(nextValue, props.width, props.height);\n      needUpdate = true;\n    }\n\n    // This blocks checks the scale factors\n    if (prevProps.scaleFactorMin !== props.scaleFactorMin || prevProps.scaleFactorMax !== props.scaleFactorMax) {\n      nextValue = setZoomLevels(nextValue, props.scaleFactorMin, props.scaleFactorMax);\n      needUpdate = true;\n    }\n    if (needUpdate) {\n      this.setValue(nextValue);\n    }\n  }\n  componentDidMount() {\n    this.autoPanIsRunning = true;\n    requestAnimationFrame(this.autoPanLoop);\n    this.ViewerDOM.addEventListener('wheel', this.onWheel, false);\n  }\n  componentWillUnmount() {\n    this.autoPanIsRunning = false;\n    this.ViewerDOM.removeEventListener('wheel', this.onWheel);\n  }\n\n  /** ReactSVGPanZoom handlers **/\n  getValue() {\n    if (isValueValid(this.props.value)) return this.props.value;\n    return this.state.defaultValue;\n  }\n  getTool() {\n    if (this.props.tool) return this.props.tool;\n    return TOOL_NONE;\n  }\n  setValue(nextValue) {\n    let {\n      onChangeValue,\n      onZoom,\n      onPan\n    } = this.props;\n    if (onChangeValue) onChangeValue(nextValue);\n    if (nextValue.lastAction) {\n      if (onZoom && nextValue.lastAction === ACTION_ZOOM) onZoom(nextValue);\n      if (onPan && nextValue.lastAction === ACTION_PAN) onPan(nextValue);\n    }\n  }\n\n  /** ReactSVGPanZoom methods **/\n  pan(SVGDeltaX, SVGDeltaY) {\n    let nextValue = pan(this.getValue(), SVGDeltaX, SVGDeltaY);\n    this.setValue(nextValue);\n  }\n  zoom(SVGPointX, SVGPointY, scaleFactor) {\n    let nextValue = zoom(this.getValue(), SVGPointX, SVGPointY, scaleFactor);\n    this.setValue(nextValue);\n  }\n  fitSelection(selectionSVGPointX, selectionSVGPointY, selectionWidth, selectionHeight) {\n    let nextValue = fitSelection(this.getValue(), selectionSVGPointX, selectionSVGPointY, selectionWidth, selectionHeight);\n    this.setValue(nextValue);\n  }\n  fitToViewer() {\n    let SVGAlignX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ALIGN_LEFT;\n    let SVGAlignY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ALIGN_TOP;\n    let nextValue = fitToViewer(this.getValue(), SVGAlignX, SVGAlignY);\n    this.setValue(nextValue);\n  }\n  zoomOnViewerCenter(scaleFactor) {\n    let nextValue = zoomOnViewerCenter(this.getValue(), scaleFactor);\n    this.setValue(nextValue);\n  }\n  setPointOnViewerCenter(SVGPointX, SVGPointY, zoomLevel) {\n    let nextValue = setPointOnViewerCenter(this.getValue(), SVGPointX, SVGPointY, zoomLevel);\n    this.setValue(nextValue);\n  }\n  reset() {\n    let nextValue = reset(this.getValue());\n    this.setValue(nextValue);\n  }\n  openMiniature() {\n    let nextValue = openMiniature(this.getValue());\n    this.setValue(nextValue);\n  }\n  closeMiniature() {\n    let nextValue = closeMiniature(this.getValue());\n    this.setValue(nextValue);\n  }\n\n  /** ReactSVGPanZoom internals **/\n  handleViewerEvent(event) {\n    let {\n      props,\n      ViewerDOM\n    } = this;\n    if (!([TOOL_NONE, TOOL_AUTO].indexOf(this.getTool()) >= 0)) return;\n    if (event.target === ViewerDOM) return;\n    let eventsHandler = {\n      click: props.onClick,\n      dblclick: props.onDoubleClick,\n      mousemove: props.onMouseMove,\n      mouseup: props.onMouseUp,\n      mousedown: props.onMouseDown,\n      touchstart: props.onTouchStart,\n      touchmove: props.onTouchMove,\n      touchend: props.onTouchEnd,\n      touchcancel: props.onTouchCancel\n    };\n    let onEventHandler = eventsHandler[event.type];\n    if (!onEventHandler) return;\n    onEventHandler(eventFactory(event, props.value, ViewerDOM));\n  }\n  autoPanLoop() {\n    let coords = {\n      x: this.state.pointerX,\n      y: this.state.pointerY\n    };\n    let nextValue = onInterval(null, this.ViewerDOM, this.getTool(), this.getValue(), this.props, coords);\n    if (this.getValue() !== nextValue) {\n      this.setValue(nextValue);\n    }\n    if (this.autoPanIsRunning) {\n      requestAnimationFrame(this.autoPanLoop);\n    }\n  }\n  onWheel(event) {\n    let nextValue = onWheel(event, this.ViewerDOM, this.getTool(), this.getValue(), this.props);\n    if (this.getValue() !== nextValue) this.setValue(nextValue);\n  }\n\n  /** React renderer **/\n  render() {\n    let {\n      props,\n      state: {\n        pointerX,\n        pointerY\n      }\n    } = this;\n    let tool = this.getTool();\n    let value = this.getValue();\n    let {\n      customToolbar: CustomToolbar = Toolbar,\n      customMiniature: CustomMiniature = Miniature\n    } = props;\n    let panningWithToolAuto = tool === TOOL_AUTO && value.mode === MODE_PANNING && value.startX !== value.endX && value.startY !== value.endY;\n    let cursor;\n    if (tool === TOOL_PAN) cursor = cursorPolyfill(value.mode === MODE_PANNING ? 'grabbing' : 'grab');\n    if (tool === TOOL_ZOOM_IN) cursor = cursorPolyfill('zoom-in');\n    if (tool === TOOL_ZOOM_OUT) cursor = cursorPolyfill('zoom-out');\n    if (panningWithToolAuto) cursor = cursorPolyfill('grabbing');\n    let blockChildEvents = [TOOL_PAN, TOOL_ZOOM_IN, TOOL_ZOOM_OUT].indexOf(tool) >= 0;\n    blockChildEvents = blockChildEvents || panningWithToolAuto;\n    const touchAction = this.props.detectPinchGesture || [TOOL_PAN, TOOL_AUTO].indexOf(this.getTool()) !== -1 ? 'none' : undefined;\n    const style = {\n      display: 'block',\n      cursor,\n      touchAction\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: _objectSpread({\n        position: \"relative\",\n        width: value.viewerWidth,\n        height: value.viewerHeight\n      }, props.style),\n      className: this.props.className\n    }, /*#__PURE__*/React.createElement(\"svg\", {\n      ref: ViewerDOM => this.ViewerDOM = ViewerDOM,\n      width: value.viewerWidth,\n      height: value.viewerHeight,\n      style: style,\n      onMouseDown: event => {\n        let nextValue = onMouseDown(event, this.ViewerDOM, this.getTool(), this.getValue(), this.props);\n        if (this.getValue() !== nextValue) this.setValue(nextValue);\n        this.handleViewerEvent(event);\n      },\n      onMouseMove: event => {\n        let {\n          left,\n          top\n        } = this.ViewerDOM.getBoundingClientRect();\n        let x = event.clientX - Math.round(left);\n        let y = event.clientY - Math.round(top);\n        let nextValue = onMouseMove(event, this.ViewerDOM, this.getTool(), this.getValue(), this.props, {\n          x,\n          y\n        });\n        if (this.getValue() !== nextValue) this.setValue(nextValue);\n        this.setState({\n          pointerX: x,\n          pointerY: y\n        });\n        this.handleViewerEvent(event);\n      },\n      onMouseUp: event => {\n        let nextValue = onMouseUp(event, this.ViewerDOM, this.getTool(), this.getValue(), this.props);\n        if (this.getValue() !== nextValue) this.setValue(nextValue);\n        this.handleViewerEvent(event);\n      },\n      onClick: event => {\n        this.handleViewerEvent(event);\n      },\n      onDoubleClick: event => {\n        let nextValue = onDoubleClick(event, this.ViewerDOM, this.getTool(), this.getValue(), this.props);\n        if (this.getValue() !== nextValue) this.setValue(nextValue);\n        this.handleViewerEvent(event);\n      },\n      onMouseEnter: event => {\n        if (detectTouch()) return;\n        let nextValue = onMouseEnterOrLeave(event, this.ViewerDOM, this.getTool(), this.getValue(), this.props);\n        if (this.getValue() !== nextValue) this.setValue(nextValue);\n      },\n      onMouseLeave: event => {\n        let nextValue = onMouseEnterOrLeave(event, this.ViewerDOM, this.getTool(), this.getValue(), this.props);\n        if (this.getValue() !== nextValue) this.setValue(nextValue);\n      },\n      onTouchStart: event => {\n        let nextValue = onTouchStart(event, this.ViewerDOM, this.getTool(), this.getValue(), this.props);\n        if (this.getValue() !== nextValue) this.setValue(nextValue);\n        this.handleViewerEvent(event);\n      },\n      onTouchMove: event => {\n        let nextValue = onTouchMove(event, this.ViewerDOM, this.getTool(), this.getValue(), this.props);\n        if (this.getValue() !== nextValue) this.setValue(nextValue);\n        this.handleViewerEvent(event);\n      },\n      onTouchEnd: event => {\n        let nextValue = onTouchEnd(event, this.ViewerDOM, this.getTool(), this.getValue(), this.props);\n        if (this.getValue() !== nextValue) this.setValue(nextValue);\n        this.handleViewerEvent(event);\n      },\n      onTouchCancel: event => {\n        let nextValue = onTouchCancel(event, this.ViewerDOM, this.getTool(), this.getValue(), this.props);\n        if (this.getValue() !== nextValue) this.setValue(nextValue);\n        this.handleViewerEvent(event);\n      }\n    }, /*#__PURE__*/React.createElement(\"rect\", {\n      fill: props.background,\n      x: 0,\n      y: 0,\n      width: value.viewerWidth,\n      height: value.viewerHeight,\n      style: {\n        pointerEvents: \"none\"\n      }\n    }), /*#__PURE__*/React.createElement(\"g\", {\n      transform: toSVG(value),\n      style: blockChildEvents ? {\n        pointerEvents: \"none\"\n      } : {}\n    }, /*#__PURE__*/React.createElement(\"rect\", {\n      fill: this.props.SVGBackground,\n      style: this.props.SVGStyle,\n      x: value.SVGMinX || 0,\n      y: value.SVGMinY || 0,\n      width: value.SVGWidth,\n      height: value.SVGHeight\n    }), /*#__PURE__*/React.createElement(\"g\", null, props.children.props.children)), !([TOOL_NONE, TOOL_AUTO].indexOf(tool) >= 0 && props.detectAutoPan && value.focus) ? null : /*#__PURE__*/React.createElement(\"g\", {\n      style: {\n        pointerEvents: \"none\"\n      }\n    }, !(pointerY <= 20) ? null : /*#__PURE__*/React.createElement(BorderGradient, {\n      direction: POSITION_TOP,\n      width: value.viewerWidth,\n      height: value.viewerHeight\n    }), !(value.viewerWidth - pointerX <= 20) ? null : /*#__PURE__*/React.createElement(BorderGradient, {\n      direction: POSITION_RIGHT,\n      width: value.viewerWidth,\n      height: value.viewerHeight\n    }), !(value.viewerHeight - pointerY <= 20) ? null : /*#__PURE__*/React.createElement(BorderGradient, {\n      direction: POSITION_BOTTOM,\n      width: value.viewerWidth,\n      height: value.viewerHeight\n    }), !(value.focus && pointerX <= 20) ? null : /*#__PURE__*/React.createElement(BorderGradient, {\n      direction: POSITION_LEFT,\n      width: value.viewerWidth,\n      height: value.viewerHeight\n    })), !(value.mode === MODE_ZOOMING) ? null : /*#__PURE__*/React.createElement(Selection, {\n      startX: value.startX,\n      startY: value.startY,\n      endX: value.endX,\n      endY: value.endY\n    })), props.toolbarProps.position === POSITION_NONE ? null : /*#__PURE__*/React.createElement(CustomToolbar, _extends({}, this.props.toolbarProps, {\n      value: value,\n      onChangeValue: value => this.setValue(value),\n      tool: tool,\n      onChangeTool: tool => this.props.onChangeTool(tool)\n    })), props.miniatureProps.position === POSITION_NONE ? null : /*#__PURE__*/React.createElement(CustomMiniature, _extends({}, this.props.miniatureProps, {\n      value: value,\n      onChangeValue: value => this.setValue(value),\n      SVGBackground: this.props.SVGBackground\n    }), props.children.props.children));\n  }\n}\nReactSVGPanZoom.propTypes = {\n  /**************************************************************************/\n  /*  Viewer configuration                                                  */\n  /**************************************************************************/\n\n  /**\n   *   width of the viewer displayed on screen\n   */\n  width: PropTypes.number.isRequired,\n  /**\n  * height of the viewer displayed on screen\n  */\n  height: PropTypes.number.isRequired,\n  /**\n  * value of the viewer (current camera view)\n  */\n  value: PropTypes.oneOfType([PropTypes.object, PropTypes.shape({\n    version: PropTypes.oneOf([2]).isRequired,\n    mode: PropTypes.oneOf([MODE_IDLE, MODE_PANNING, MODE_ZOOMING]).isRequired,\n    focus: PropTypes.bool.isRequired,\n    a: PropTypes.number.isRequired,\n    b: PropTypes.number.isRequired,\n    c: PropTypes.number.isRequired,\n    d: PropTypes.number.isRequired,\n    e: PropTypes.number.isRequired,\n    f: PropTypes.number.isRequired,\n    viewerWidth: PropTypes.number.isRequired,\n    viewerHeight: PropTypes.number.isRequired,\n    SVGMinX: PropTypes.number.isRequired,\n    SVGMinY: PropTypes.number.isRequired,\n    SVGWidth: PropTypes.number.isRequired,\n    SVGHeight: PropTypes.number.isRequired,\n    startX: PropTypes.number,\n    startY: PropTypes.number,\n    endX: PropTypes.number,\n    endY: PropTypes.number,\n    miniatureOpen: PropTypes.bool.isRequired\n  })]).isRequired,\n  /**\n  * handler something changed\n  */\n  onChangeValue: PropTypes.func.isRequired,\n  /**\n  * current active tool (TOOL_NONE, TOOL_PAN, TOOL_ZOOM_IN, TOOL_ZOOM_OUT)\n  */\n  tool: PropTypes.oneOf([TOOL_AUTO, TOOL_NONE, TOOL_PAN, TOOL_ZOOM_IN, TOOL_ZOOM_OUT]).isRequired,\n  /**\n  * handler tool changed\n  */\n  onChangeTool: PropTypes.func.isRequired,\n  /**************************************************************************/\n  /* Customize style                                                        */\n  /**************************************************************************/\n\n  /**\n  * background of the viewer\n  */\n  background: PropTypes.string,\n  /**\n  * background of the svg\n  */\n  SVGBackground: PropTypes.string,\n  /**\n  * style of the svg\n  */\n  SVGStyle: PropTypes.object,\n  /**\n  * CSS style of the Viewer\n  */\n  style: PropTypes.object,\n  /**\n  * className of the Viewer\n  */\n  className: PropTypes.string,\n  /**************************************************************************/\n  /* Detect events                                                          */\n  /**************************************************************************/\n\n  /**\n  * perform zoom operation on mouse scroll\n  */\n  detectWheel: PropTypes.bool,\n  /**\n  * perform PAN if the mouse is on viewer border\n  */\n  detectAutoPan: PropTypes.bool,\n  /**\n  * perform zoom operation on pinch gesture\n  */\n  detectPinchGesture: PropTypes.bool,\n  /**\n  * handler zoom level changed\n  */\n  onZoom: PropTypes.func,\n  /**\n  * handler pan action performed\n  */\n  onPan: PropTypes.func,\n  /**\n  * handler click\n  */\n  onClick: PropTypes.func,\n  /**\n  * handler double click\n  */\n  onDoubleClick: PropTypes.func,\n  /**\n  * handler mouseup\n  */\n  onMouseUp: PropTypes.func,\n  /**\n  * handler mousemove\n  */\n  onMouseMove: PropTypes.func,\n  /**\n  * handler mousedown\n  */\n  onMouseDown: PropTypes.func,\n  /**************************************************************************/\n  /* Some advanced configurations                                           */\n  /**************************************************************************/\n\n  /**\n  * if disabled the user can move the image outside the viewer\n  */\n  preventPanOutside: PropTypes.bool,\n  /**\n  * how much scale in or out\n  */\n  scaleFactor: PropTypes.number,\n  /**\n  * how much scale in or out on mouse wheel (requires detectWheel enabled)\n  */\n  scaleFactorOnWheel: PropTypes.number,\n  /**\n  * maximum amount of scale a user can zoom in to\n  */\n  scaleFactorMax: PropTypes.number,\n  /**\n  * minimum amount of a scale a user can zoom out of\n  */\n  scaleFactorMin: PropTypes.number,\n  /**\n  * modifier keys //https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/getModifierState\n  */\n  modifierKeys: PropTypes.array,\n  /**\n  * Turn off zoom on double click\n  */\n  disableDoubleClickZoomWithToolAuto: PropTypes.bool,\n  /**************************************************************************/\n  /* Miniature configurations                                                 */\n  /**************************************************************************/\n\n  /**\n  * override miniature component\n  */\n  customMiniature: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\n  /**\n  * miniature props\n  */\n  miniatureProps: PropTypes.shape({\n    position: PropTypes.oneOf([POSITION_NONE, POSITION_RIGHT, POSITION_LEFT]),\n    background: PropTypes.string,\n    width: PropTypes.number,\n    height: PropTypes.number\n  }),\n  /**************************************************************************/\n  /* Toolbar configurations                                                 */\n  /**************************************************************************/\n\n  /**\n  * override toolbar component\n  */\n  customToolbar: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\n  /**\n  * toolbar props\n  */\n  toolbarProps: PropTypes.shape({\n    position: PropTypes.oneOf([POSITION_NONE, POSITION_TOP, POSITION_RIGHT, POSITION_BOTTOM, POSITION_LEFT]),\n    SVGAlignX: PropTypes.oneOf([ALIGN_CENTER, ALIGN_LEFT, ALIGN_RIGHT]),\n    SVGAlignY: PropTypes.oneOf([ALIGN_CENTER, ALIGN_TOP, ALIGN_BOTTOM]),\n    activeToolColor: PropTypes.string\n  }),\n  /**************************************************************************/\n  /* Children Check                                                         */\n  /**************************************************************************/\n  /**\n  * accept only one node SVG\n  */\n  children: function (props, propName, componentName) {\n    // Only accept a single child, of the appropriate type\n    //credits: http://www.mattzabriskie.com/blog/react-validating-children\n    let prop = props[propName];\n    let types = ['svg'];\n    if (React.Children.count(prop) !== 1 || types.indexOf(prop.type) === -1) {\n      return new Error('`' + componentName + '` ' + 'should have a single child of the following types: ' + ' `' + types.join('`, `') + '`.');\n    }\n    if ((!prop.props.hasOwnProperty('width') || !prop.props.hasOwnProperty('height')) && !prop.props.hasOwnProperty('viewBox')) {\n      return new Error('SVG should have props `width` and `height` or `viewBox`');\n    }\n  }\n};\nReactSVGPanZoom.defaultProps = {\n  style: {},\n  background: \"#616264\",\n  SVGBackground: \"#fff\",\n  SVGStyle: {},\n  detectWheel: true,\n  detectAutoPan: true,\n  detectPinchGesture: true,\n  modifierKeys: [\"Alt\", \"Shift\", \"Control\"],\n  preventPanOutside: true,\n  scaleFactor: 1.1,\n  scaleFactorOnWheel: 1.06,\n  disableZoomWithToolAuto: false,\n  onZoom: null,\n  onPan: null,\n  toolbarProps: {},\n  miniatureProps: {}\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}