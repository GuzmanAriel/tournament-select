{"ast":null,"code":"function ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nimport { MODE_IDLE } from '../constants';\nimport { applyToPoint, fromObject, identity, inverse, scale, transform, translate } from 'transformation-matrix';\nconst VERSION = 3;\nexport const DEFAULT_MODE = MODE_IDLE;\n\n/**\n * Obtain default value\n * @returns {Object}\n */\nexport function getDefaultValue(viewerWidth, viewerHeight, SVGMinX, SVGMinY, SVGWidth, SVGHeight) {\n  let scaleFactorMin = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;\n  let scaleFactorMax = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;\n  return set({}, _objectSpread(_objectSpread({}, identity()), {}, {\n    version: VERSION,\n    mode: DEFAULT_MODE,\n    focus: false,\n    pinchPointDistance: null,\n    prePinchMode: null,\n    viewerWidth,\n    viewerHeight,\n    SVGMinX,\n    SVGMinY,\n    SVGWidth,\n    SVGHeight,\n    scaleFactorMin,\n    scaleFactorMax,\n    startX: null,\n    startY: null,\n    endX: null,\n    endY: null,\n    miniatureOpen: true,\n    lastAction: null\n  }));\n}\n\n/**\n * Change value\n * @param value\n * @param patch\n * @param action\n * @returns {Object}\n */\nexport function set(value, patch) {\n  let action = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  value = Object.assign({}, value, patch, {\n    lastAction: action\n  });\n  return Object.freeze(value);\n}\n\n/**\n * value valid check\n * @param value\n */\nexport function isValueValid(value) {\n  return value !== null && typeof value === 'object' && value.hasOwnProperty('version') && value.version === VERSION;\n}\n\n/**\n * Export x,y coords relative to SVG\n * @param value\n * @param viewerX\n * @param viewerY\n * @returns {*|{x, y}|{x: number, y: number}}\n */\nexport function getSVGPoint(value, viewerX, viewerY) {\n  let matrix = fromObject(value);\n  let inverseMatrix = inverse(matrix);\n  return applyToPoint(inverseMatrix, {\n    x: viewerX,\n    y: viewerY\n  });\n}\n\n/**\n * Decompose matrix from value\n * @param value\n * @returns {{scaleFactor: number, translationX: number, translationY: number}}\n */\nexport function decompose(value) {\n  let matrix = fromObject(value);\n  return {\n    scaleFactor: matrix.a,\n    translationX: matrix.e,\n    translationY: matrix.f\n  };\n}\n\n/**\n *\n * @param value\n * @param focus\n * @returns {Object}\n */\nexport function setFocus(value, focus) {\n  return set(value, {\n    focus\n  });\n}\n\n/**\n *\n * @param value\n * @param viewerWidth\n * @param viewerHeight\n * @returns {Object}\n */\nexport function setViewerSize(value, viewerWidth, viewerHeight) {\n  return set(value, {\n    viewerWidth,\n    viewerHeight\n  });\n}\n\n/**\n *\n * @param value\n * @param SVGMinX\n * @param SVGMinY\n * @param SVGWidth\n * @param SVGHeight\n * @returns {Object}\n */\nexport function setSVGViewBox(value, SVGMinX, SVGMinY, SVGWidth, SVGHeight) {\n  return set(value, {\n    SVGMinX,\n    SVGMinY,\n    SVGWidth,\n    SVGHeight\n  });\n}\n\n/**\n *\n * @param value\n * @param scaleFactorMin\n * @param scaleFactorMax\n * @returns {Object}\n */\n//TODO rename to setZoomLimits\nexport function setZoomLevels(value, scaleFactorMin, scaleFactorMax) {\n  return set(value, {\n    scaleFactorMin,\n    scaleFactorMax\n  });\n}\n\n/**\n *\n * @param value\n * @param SVGPointX\n * @param SVGPointY\n * @param zoomLevel\n * @returns {Object}\n */\nexport function setPointOnViewerCenter(value, SVGPointX, SVGPointY, zoomLevel) {\n  let {\n    viewerWidth,\n    viewerHeight\n  } = value;\n  let matrix = transform(translate(-SVGPointX + viewerWidth / 2, -SVGPointY + viewerHeight / 2),\n  //4\n  translate(SVGPointX, SVGPointY),\n  //3\n  scale(zoomLevel, zoomLevel),\n  //2\n  translate(-SVGPointX, -SVGPointY) //1\n  );\n  return set(value, _objectSpread({\n    mode: MODE_IDLE\n  }, matrix));\n}\n\n/**\n *\n * @param value\n * @returns {Object}\n */\nexport function reset(value) {\n  return set(value, _objectSpread({\n    mode: MODE_IDLE\n  }, identity()));\n}\n\n/**\n *\n * @param value\n * @returns {Object}\n */\nexport function resetMode(value) {\n  return set(value, {\n    mode: DEFAULT_MODE,\n    startX: null,\n    startY: null,\n    endX: null,\n    endY: null\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}