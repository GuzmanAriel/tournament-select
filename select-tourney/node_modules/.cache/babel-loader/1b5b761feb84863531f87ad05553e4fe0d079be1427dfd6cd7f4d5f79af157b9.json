{"ast":null,"code":"import { translate } from './translate';\nimport { applyToPoint } from './applyToPoint';\nimport { rotate } from './rotate';\nimport { scale } from './scale';\nimport { compose } from './transform';\n\n// https://manivannan-ai.medium.com/find-the-angle-between-three-points-from-2d-using-python-348c513e2cd\n\n/**\n * Calculate a transformation matrix from a point that starts from A to A'\n * This approach can be associated to a pointer that moves on a device\n * @param {Point} startingPoint - Starting point (A)\n * @param {Point} endingPoint - Ending point (A')\n */\nexport function fromOneMovingPoint(startingPoint, endingPoint) {\n  const tx = endingPoint.x - startingPoint.x;\n  const ty = endingPoint.y - startingPoint.y;\n  return translate(tx, ty);\n}\n\n/**\n * Calculate a transformation matrix about two points that move from positions A and B to A' and B'\n * This approach can be associated to a two finger gesture on a touch device\n * @param {Point} startingPoint1 - Starting Point (A)\n * @param {Point} startingPoint2 - Starting Point (B)\n * @param {Point} endingPoint1 - Ending point (A')\n * @param {Point} endingPoint2 - Ending Point (B')\n */\nexport function fromTwoMovingPoints(startingPoint1, startingPoint2, endingPoint1, endingPoint2) {\n  // finds translation\n  const translationMatrix = fromOneMovingPoint(startingPoint1, endingPoint1);\n  const pointA = applyToPoint(translationMatrix, startingPoint2); // I have to translate this point\n  const center = endingPoint1;\n  const pointB = endingPoint2;\n\n  // finds rotation matrix\n  const angle = Math.atan2(pointB.y - center.y, pointB.x - center.x) - Math.atan2(pointA.y - center.y, pointA.x - center.x);\n  const rotationMatrix = rotate(angle, center.x, center.y);\n\n  // finds scale matrix\n  const d1 = Math.sqrt(Math.pow(pointA.x - center.x, 2) + Math.pow(pointA.y - center.y, 2));\n  const d2 = Math.sqrt(Math.pow(pointB.x - center.x, 2) + Math.pow(pointB.y - center.y, 2));\n  const scalingLevel = d2 / d1;\n  const scalingMatrix = scale(scalingLevel, scalingLevel, center.x, center.y);\n  return compose([translationMatrix, scalingMatrix, rotationMatrix]);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}