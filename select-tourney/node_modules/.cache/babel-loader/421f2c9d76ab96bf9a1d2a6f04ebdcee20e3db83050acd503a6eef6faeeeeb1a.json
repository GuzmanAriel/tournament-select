{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { TOURNAMENTS } from '../../app/shared/TOURNAMENTS';\nconst initialState = {\n  tournamentsArray: TOURNAMENTS\n};\nconst tournamentsSlice = createSlice({\n  name: 'tournaments',\n  initialState\n});\nexport const tournamentsReducer = tournamentsSlice.reducer;\nexport const selectAllTournaments = state => {\n  return state.tournaments.tournamentsArray;\n};\nexport const selectTournamentById = id => state => {\n  return state.tournaments.tournamentsArray.find(tournament => tournament.id === parseInt(id));\n};","map":{"version":3,"names":["createSlice","TOURNAMENTS","initialState","tournamentsArray","tournamentsSlice","name","tournamentsReducer","reducer","selectAllTournaments","state","tournaments","selectTournamentById","id","find","tournament","parseInt"],"sources":["/Users/ag/Desktop/SelectTourney/select-tourney/src/features/tournaments/tournamentsSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { TOURNAMENTS } from '../../app/shared/TOURNAMENTS';\n\n\nconst initialState = {\n    tournamentsArray: TOURNAMENTS\n};\n\nconst tournamentsSlice = createSlice({\n    name: 'tournaments',\n    initialState\n});\n\nexport const tournamentsReducer = tournamentsSlice.reducer;\n\nexport const selectAllTournaments = (state) => {\n    return state.tournaments.tournamentsArray;\n};\n\nexport const selectTournamentById = (id) => (state) => {\n    return state.tournaments.tournamentsArray.find(\n        (tournament) => tournament.id === parseInt(id)\n    );\n};\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,WAAW,QAAQ,8BAA8B;AAG1D,MAAMC,YAAY,GAAG;EACjBC,gBAAgB,EAAEF;AACtB,CAAC;AAED,MAAMG,gBAAgB,GAAGJ,WAAW,CAAC;EACjCK,IAAI,EAAE,aAAa;EACnBH;AACJ,CAAC,CAAC;AAEF,OAAO,MAAMI,kBAAkB,GAAGF,gBAAgB,CAACG,OAAO;AAE1D,OAAO,MAAMC,oBAAoB,GAAIC,KAAK,IAAK;EAC3C,OAAOA,KAAK,CAACC,WAAW,CAACP,gBAAgB;AAC7C,CAAC;AAED,OAAO,MAAMQ,oBAAoB,GAAIC,EAAE,IAAMH,KAAK,IAAK;EACnD,OAAOA,KAAK,CAACC,WAAW,CAACP,gBAAgB,CAACU,IAAI,CACzCC,UAAU,IAAKA,UAAU,CAACF,EAAE,KAAKG,QAAQ,CAACH,EAAE,CACjD,CAAC;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}