{"ast":null,"code":"function ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nimport { fromObject, scale, transform, translate } from 'transformation-matrix';\nimport { ACTION_ZOOM, MODE_IDLE, MODE_ZOOMING, ALIGN_CENTER, ALIGN_LEFT, ALIGN_RIGHT, ALIGN_TOP, ALIGN_BOTTOM, ALIGN_COVER } from '../constants';\nimport { decompose, getSVGPoint, set } from './common';\nimport calculateBox from '../utils/calculateBox';\nexport function isZoomLevelGoingOutOfBounds(value, scaleFactor) {\n  const {\n    scaleFactor: curScaleFactor\n  } = decompose(value);\n  const lessThanScaleFactorMin = value.scaleFactorMin && curScaleFactor * scaleFactor < value.scaleFactorMin;\n  const moreThanScaleFactorMax = value.scaleFactorMax && curScaleFactor * scaleFactor > value.scaleFactorMax;\n  return lessThanScaleFactorMin && scaleFactor < 1 || moreThanScaleFactorMax && scaleFactor > 1;\n}\nexport function limitZoomLevel(value, matrix) {\n  let scaleLevel = matrix.a;\n  if (value.scaleFactorMin != null) {\n    // limit minimum zoom\n    scaleLevel = Math.max(scaleLevel, value.scaleFactorMin);\n  }\n  if (value.scaleFactorMax != null) {\n    // limit maximum zoom\n    scaleLevel = Math.min(scaleLevel, value.scaleFactorMax);\n  }\n  return set(matrix, {\n    a: scaleLevel,\n    d: scaleLevel\n  });\n}\nexport function zoom(value, SVGPointX, SVGPointY, scaleFactor) {\n  if (isZoomLevelGoingOutOfBounds(value, scaleFactor)) {\n    // Do not change translation and scale of value\n    return value;\n  }\n  const matrix = transform(fromObject(value), translate(SVGPointX, SVGPointY), scale(scaleFactor, scaleFactor), translate(-SVGPointX, -SVGPointY));\n  return set(value, _objectSpread(_objectSpread({\n    mode: MODE_IDLE\n  }, matrix), {}, {\n    startX: null,\n    startY: null,\n    endX: null,\n    endY: null\n  }), ACTION_ZOOM);\n}\n\n//ENHANCEMENT: add ability to control alignment\n//ENHANCEMENT: add ability to selectively fit image inside viewer\n//ENHANCEMENT: refactor some logic in order to merge with fitToViewer function\nexport function fitSelection(value, selectionSVGPointX, selectionSVGPointY, selectionWidth, selectionHeight) {\n  let {\n    viewerWidth,\n    viewerHeight\n  } = value;\n  let scaleX = viewerWidth / selectionWidth;\n  let scaleY = viewerHeight / selectionHeight;\n  let scaleLevel = Math.min(scaleX, scaleY);\n  const matrix = transform(scale(scaleLevel, scaleLevel),\n  //2\n  translate(-selectionSVGPointX, -selectionSVGPointY) //1\n  );\n  if (isZoomLevelGoingOutOfBounds(value, scaleLevel / value.d)) {\n    // Do not allow scale and translation\n    return set(value, {\n      mode: MODE_IDLE,\n      startX: null,\n      startY: null,\n      endX: null,\n      endY: null\n    });\n  }\n  return set(value, _objectSpread(_objectSpread({\n    mode: MODE_IDLE\n  }, limitZoomLevel(value, matrix)), {}, {\n    startX: null,\n    startY: null,\n    endX: null,\n    endY: null\n  }), ACTION_ZOOM);\n}\nexport function fitToViewer(value) {\n  let SVGAlignX = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ALIGN_LEFT;\n  let SVGAlignY = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ALIGN_TOP;\n  let {\n    viewerWidth,\n    viewerHeight,\n    SVGMinX,\n    SVGMinY,\n    SVGWidth,\n    SVGHeight\n  } = value;\n  let scaleX = viewerWidth / SVGWidth;\n  let scaleY = viewerHeight / SVGHeight;\n  let scaleLevel = Math.min(scaleX, scaleY);\n  let scaleMatrix = scale(scaleLevel, scaleLevel);\n  let translateX = -SVGMinX * scaleX;\n  let translateY = -SVGMinY * scaleY;\n\n  // after fitting, SVG and the viewer will match in width (1) or in height (2) or SVG will cover the container with preserving aspect ratio (0)\n  if (scaleX < scaleY) {\n    let remainderY = viewerHeight - scaleX * SVGHeight;\n\n    //(1) match in width, meaning scaled SVGHeight <= viewerHeight\n    switch (SVGAlignY) {\n      case ALIGN_TOP:\n        translateY = -SVGMinY * scaleLevel;\n        break;\n      case ALIGN_CENTER:\n        translateY = Math.round(remainderY / 2) - SVGMinY * scaleLevel;\n        break;\n      case ALIGN_BOTTOM:\n        translateY = remainderY - SVGMinY * scaleLevel;\n        break;\n      case ALIGN_COVER:\n        scaleMatrix = scale(scaleY, scaleY); // (0) we must now match to short edge, in this case - height\n        let remainderX = viewerWidth - scaleY * SVGWidth; // calculate remainder in the other scale\n\n        translateX = SVGMinX + Math.round(remainderX / 2); // center by the long edge\n        break;\n      default:\n      //no op\n    }\n  } else {\n    let remainderX = viewerWidth - scaleY * SVGWidth;\n\n    //(2) match in height, meaning scaled SVGWidth <= viewerWidth\n    switch (SVGAlignX) {\n      case ALIGN_LEFT:\n        translateX = -SVGMinX * scaleLevel;\n        break;\n      case ALIGN_CENTER:\n        translateX = Math.round(remainderX / 2) - SVGMinX * scaleLevel;\n        break;\n      case ALIGN_RIGHT:\n        translateX = remainderX - SVGMinX * scaleLevel;\n        break;\n      case ALIGN_COVER:\n        scaleMatrix = scale(scaleX, scaleX); // (0) we must now match to short edge, in this case - width\n        let remainderY = viewerHeight - scaleX * SVGHeight; // calculate remainder in the other scale\n\n        translateY = SVGMinY + Math.round(remainderY / 2); // center by the long edge\n        break;\n      default:\n      //no op\n    }\n  }\n  const translationMatrix = translate(translateX, translateY);\n  const matrix = transform(translationMatrix,\n  //2\n  scaleMatrix //1\n  );\n  if (isZoomLevelGoingOutOfBounds(value, scaleLevel / value.d)) {\n    // Do not allow scale and translation\n    return set(value, {\n      mode: MODE_IDLE,\n      startX: null,\n      startY: null,\n      endX: null,\n      endY: null\n    });\n  }\n  return set(value, _objectSpread(_objectSpread({\n    mode: MODE_IDLE\n  }, limitZoomLevel(value, matrix)), {}, {\n    startX: null,\n    startY: null,\n    endX: null,\n    endY: null\n  }), ACTION_ZOOM);\n}\nexport function zoomOnViewerCenter(value, scaleFactor) {\n  let {\n    viewerWidth,\n    viewerHeight\n  } = value;\n  let SVGPoint = getSVGPoint(value, viewerWidth / 2, viewerHeight / 2);\n  return zoom(value, SVGPoint.x, SVGPoint.y, scaleFactor);\n}\nexport function startZooming(value, viewerX, viewerY) {\n  return set(value, {\n    mode: MODE_ZOOMING,\n    startX: viewerX,\n    startY: viewerY,\n    endX: viewerX,\n    endY: viewerY\n  });\n}\nexport function updateZooming(value, viewerX, viewerY) {\n  if (value.mode !== MODE_ZOOMING) throw new Error('update selection not allowed in this mode ' + value.mode);\n  return set(value, {\n    endX: viewerX,\n    endY: viewerY\n  });\n}\nexport function stopZooming(value, viewerX, viewerY, scaleFactor) {\n  const TOLERATED_DISTANCE = 7; //minimum distance to choose if area selection or drill down on point\n  let {\n    startX,\n    startY\n  } = value;\n  let start = getSVGPoint(value, startX, startY);\n  let end = getSVGPoint(value, viewerX, viewerY);\n  if (Math.abs(startX - viewerX) > TOLERATED_DISTANCE && Math.abs(startY - viewerY) > TOLERATED_DISTANCE) {\n    let box = calculateBox(start, end);\n    return fitSelection(value, box.x, box.y, box.width, box.height);\n  } else {\n    let SVGPoint = getSVGPoint(value, viewerX, viewerY);\n    return zoom(value, SVGPoint.x, SVGPoint.y, scaleFactor);\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}