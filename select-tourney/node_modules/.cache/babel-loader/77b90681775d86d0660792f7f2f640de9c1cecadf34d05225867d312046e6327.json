{"ast":null,"code":"function ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nimport { ACTION_PAN, MODE_IDLE, MODE_PANNING } from '../constants';\nimport { set, getSVGPoint } from './common';\nimport { fromObject, translate, transform, applyToPoints } from 'transformation-matrix';\n\n/**\n * Atomic pan operation\n * @param value\n * @param SVGDeltaX drag movement\n * @param SVGDeltaY drag movement\n * @param panLimit forces the image to keep at least x pixel inside the viewer\n * @returns {Object}\n */\nexport function pan(value, SVGDeltaX, SVGDeltaY) {\n  let panLimit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;\n  let matrix = transform(fromObject(value),\n  //2\n  translate(SVGDeltaX, SVGDeltaY) //1\n  );\n\n  // apply pan limits\n  if (panLimit) {\n    let [{\n      x: x1,\n      y: y1\n    }, {\n      x: x2,\n      y: y2\n    }] = applyToPoints(matrix, [{\n      x: value.SVGMinX + panLimit,\n      y: value.SVGMinY + panLimit\n    }, {\n      x: value.SVGMinX + value.SVGWidth - panLimit,\n      y: value.SVGMinY + value.SVGHeight - panLimit\n    }]);\n\n    //x limit\n    let moveX = 0;\n    if (value.viewerWidth - x1 < 0) moveX = value.viewerWidth - x1;else if (x2 < 0) moveX = -x2;\n\n    //y limit\n    let moveY = 0;\n    if (value.viewerHeight - y1 < 0) moveY = value.viewerHeight - y1;else if (y2 < 0) moveY = -y2;\n\n    //apply limits\n    matrix = transform(translate(moveX, moveY), matrix);\n  }\n  return set(value, _objectSpread({\n    mode: MODE_IDLE\n  }, matrix), ACTION_PAN);\n}\n\n/**\n * Start pan operation lifecycle\n * @param value\n * @param viewerX\n * @param viewerY\n * @return {ReadonlyArray<unknown>}\n */\nexport function startPanning(value, viewerX, viewerY) {\n  return set(value, {\n    mode: MODE_PANNING,\n    startX: viewerX,\n    startY: viewerY,\n    endX: viewerX,\n    endY: viewerY\n  }, ACTION_PAN);\n}\n\n/**\n * Continue pan operation lifecycle\n * @param value\n * @param viewerX\n * @param viewerY\n * @param panLimit\n * @return {ReadonlyArray<unknown>}\n */\nexport function updatePanning(value, viewerX, viewerY, panLimit) {\n  if (value.mode !== MODE_PANNING) throw new Error('update pan not allowed in this mode ' + value.mode);\n  let {\n    endX,\n    endY\n  } = value;\n  let start = getSVGPoint(value, endX, endY);\n  let end = getSVGPoint(value, viewerX, viewerY);\n  let deltaX = end.x - start.x;\n  let deltaY = end.y - start.y;\n  let nextValue = pan(value, deltaX, deltaY, panLimit);\n  return set(nextValue, {\n    mode: MODE_PANNING,\n    endX: viewerX,\n    endY: viewerY\n  }, ACTION_PAN);\n}\n\n/**\n * Stop pan operation lifecycle\n * @param value\n * @return {ReadonlyArray<unknown>}\n */\nexport function stopPanning(value) {\n  return set(value, {\n    mode: MODE_IDLE,\n    startX: null,\n    startY: null,\n    endX: null,\n    endY: null\n  }, ACTION_PAN);\n}\n\n/**\n * when pointer is on viewer edge -> pan image\n * @param value\n * @param viewerX\n * @param viewerY\n * @return {ReadonlyArray<any>}\n */\nexport function autoPanIfNeeded(value, viewerX, viewerY) {\n  let deltaX = 0;\n  let deltaY = 0;\n  if (viewerY <= 20) deltaY = 2;\n  if (value.viewerWidth - viewerX <= 20) deltaX = -2;\n  if (value.viewerHeight - viewerY <= 20) deltaY = -2;\n  if (viewerX <= 20) deltaX = 2;\n  deltaX = deltaX / value.d;\n  deltaY = deltaY / value.d;\n  return deltaX === 0 && deltaY === 0 ? value : pan(value, deltaX, deltaY);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}