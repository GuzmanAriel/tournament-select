{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { ThemeProvider } from 'styled-components';\nimport { sortAlphanumerically } from '../utils/string';\nimport { calculateSVGDimensions } from '../core/calculate-svg-dimensions';\nimport { MatchContextProvider } from '../core/match-context';\nimport MatchWrapper from '../core/match-wrapper';\nimport RoundHeader from '../components/round-header';\nimport { getPreviousMatches } from '../core/match-functions';\nimport { defaultStyle, getCalculatedStyles } from '../settings';\nimport { calculatePositionOfMatch } from './calculate-match-position';\nimport Connectors from './connectors';\nimport defaultTheme from '../themes/themes';\nconst SingleEliminationBracket = ({\n  matches,\n  matchComponent,\n  currentRound,\n  onMatchClick,\n  onPartyClick,\n  svgWrapper: SvgWrapper = ({\n    children\n  }) => _jsx(\"div\", {\n    children: children\n  }),\n  theme = defaultTheme,\n  options: {\n    style: inputStyle\n  } = {\n    style: defaultStyle\n  }\n}) => {\n  var _a, _b;\n  const style = Object.assign(Object.assign(Object.assign({}, defaultStyle), inputStyle), {\n    roundHeader: Object.assign(Object.assign({}, defaultStyle.roundHeader), (_a = inputStyle === null || inputStyle === void 0 ? void 0 : inputStyle.roundHeader) !== null && _a !== void 0 ? _a : {}),\n    lineInfo: Object.assign(Object.assign({}, defaultStyle.lineInfo), (_b = inputStyle === null || inputStyle === void 0 ? void 0 : inputStyle.lineInfo) !== null && _b !== void 0 ? _b : {})\n  });\n  const {\n    roundHeader,\n    columnWidth,\n    canvasPadding,\n    rowHeight,\n    width\n  } = getCalculatedStyles(style);\n  const lastGame = matches.find(match => !match.nextMatchId);\n  const generateColumn = matchesColumn => {\n    const previousMatchesColumn = matchesColumn.reduce((result, match) => {\n      return [...result, ...matches.filter(m => m.nextMatchId === match.id).sort((a, b) => sortAlphanumerically(a.name, b.name))];\n    }, []);\n    if (previousMatchesColumn.length > 0) {\n      return [...generateColumn(previousMatchesColumn), previousMatchesColumn];\n    }\n    return [previousMatchesColumn];\n  };\n  const generate2DBracketArray = final => {\n    return final ? [...generateColumn([final]), [final]].filter(arr => arr.length > 0) : [];\n  };\n  const columns = generate2DBracketArray(lastGame);\n  const {\n    gameWidth,\n    gameHeight,\n    startPosition\n  } = calculateSVGDimensions(columns[0].length, columns.length, rowHeight, columnWidth, canvasPadding, roundHeader, currentRound);\n  return _jsx(ThemeProvider, Object.assign({\n    theme: theme\n  }, {\n    children: _jsx(SvgWrapper, Object.assign({\n      bracketWidth: gameWidth,\n      bracketHeight: gameHeight,\n      startAt: startPosition\n    }, {\n      children: _jsx(\"svg\", Object.assign({\n        height: gameHeight,\n        width: gameWidth,\n        viewBox: `0 0 ${gameWidth} ${gameHeight}`\n      }, {\n        children: _jsx(MatchContextProvider, {\n          children: _jsx(\"g\", {\n            children: columns.map((matchesColumn, columnIndex) => matchesColumn.map((match, rowIndex) => {\n              const {\n                x,\n                y\n              } = calculatePositionOfMatch(rowIndex, columnIndex, {\n                canvasPadding,\n                columnWidth,\n                rowHeight\n              });\n              const previousBottomPosition = (rowIndex + 1) * 2 - 1;\n              const {\n                previousTopMatch,\n                previousBottomMatch\n              } = getPreviousMatches(columnIndex, columns, previousBottomPosition);\n              return _jsxs(\"g\", {\n                children: [roundHeader.isShown && _jsx(RoundHeader, {\n                  x: x,\n                  roundHeader: roundHeader,\n                  canvasPadding: canvasPadding,\n                  width: width,\n                  numOfRounds: columns.length,\n                  tournamentRoundText: match.tournamentRoundText,\n                  columnIndex: columnIndex\n                }), columnIndex !== 0 && _jsx(Connectors, Object.assign({}, {\n                  bracketSnippet: {\n                    currentMatch: match,\n                    previousTopMatch,\n                    previousBottomMatch\n                  },\n                  rowIndex,\n                  columnIndex,\n                  gameHeight,\n                  gameWidth,\n                  style\n                })), _jsx(\"g\", {\n                  children: _jsx(MatchWrapper, {\n                    x: x,\n                    y: y + (roundHeader.isShown ? roundHeader.height + roundHeader.marginBottom : 0),\n                    rowIndex: rowIndex,\n                    columnIndex: columnIndex,\n                    match: match,\n                    previousBottomMatch: previousBottomMatch,\n                    topText: match.startTime,\n                    bottomText: match.name,\n                    teams: match.participants,\n                    onMatchClick: onMatchClick,\n                    onPartyClick: onPartyClick,\n                    style: style,\n                    matchComponent: matchComponent\n                  })\n                })]\n              }, x + y);\n            }))\n          })\n        })\n      }))\n    }))\n  }));\n};\nexport default SingleEliminationBracket;\n//# sourceMappingURL=single-elim-bracket.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}