{"ast":null,"code":"export const validateCreateTournamentForm = values => {\n  const errors = {};\n  const today = new Date();\n  console.log('%csrc/utils/tournaments/validateCreateTournamentForm.js:4 values', 'color: #007acc;', values);\n  // Name Validation\n  if (!values.name) {\n    errors.name = \"Tournament name is required.\";\n  } else if (values.name.length < 3) {\n    errors.name = \"Tournament name must be at least 3 characters.\";\n  } else if (values.name.length > 30) {\n    errors.name = \"Tournament name must be less than 30 characters.\";\n  }\n\n  // Date Validation\n  if (!values.date) {\n    errors.date = \"Date is required.\";\n  } else if (new Date(values.date) <= today) {\n    errors.date = \"Date must be in the future.\";\n  }\n\n  // Location Validation\n  if (!values.location) {\n    errors.location = \"Location is required.\";\n  }\n\n  // Tournament Type Validation\n  if (!values.tournamentType) {\n    errors.tournamentType = \"Tournament type is required.\";\n  }\n\n  // Playoff Type Validation\n  if (!values.playoffType) {\n    errors.playoffType = \"Playoff type is required.\";\n  }\n  if (!values.totalTeams) {\n    errors.totalTeams = \"Total Teams is required.\";\n  } else if (isNaN(values.totalTeams)) {\n    errors.totalTeams = \"Total Teams must be a number.\";\n  }\n  if (!values.poolNumber) {\n    errors.poolNumber = \"Pool number is required.\";\n  } else if (isNaN(values.poolNumber)) {\n    errors.poolNumber = \"Pool number must be a number.\";\n  }\n\n  // Playoff Bracket Number Validation\n  if (!values.playoffBracketNumber) {\n    errors.playoffBracketNumber = \"Playoff bracket number is required.\";\n  } else if (isNaN(values.playoffBracketNumber)) {\n    errors.playoffBracketNumber = \"Playoff bracket must be a number.\";\n  }\n\n  // Time Validation (Ensure a time is selected)\n  if (!values.time) {\n    errors.time = \"Start time is required.\";\n  }\n\n  // Prizes Validation (Only required if prizes === true)\n  if (values.prizes) {\n    if (!values.firstPlacePrize) {\n      errors.firstPlacePrize = \"First place prize is required if prizes are enabled.\";\n    }\n  }\n  return errors;\n};","map":{"version":3,"names":["validateCreateTournamentForm","values","errors","today","Date","console","log","name","length","date","location","tournamentType","playoffType","totalTeams","isNaN","poolNumber","playoffBracketNumber","time","prizes","firstPlacePrize"],"sources":["/Users/ag/Desktop/SelectTourney/select-tourney/src/utils/tournaments/validateCreateTournamentForm.js"],"sourcesContent":["export const validateCreateTournamentForm = (values) => {\n    const errors = {};\n    const today = new Date();\n    console.log('%csrc/utils/tournaments/validateCreateTournamentForm.js:4 values', 'color: #007acc;', values);\n    // Name Validation\n    if (!values.name) {\n        errors.name = \"Tournament name is required.\";\n    } else if (values.name.length < 3) {\n        errors.name = \"Tournament name must be at least 3 characters.\";\n    } else if (values.name.length > 30) {\n        errors.name = \"Tournament name must be less than 30 characters.\";\n    }\n\n    // Date Validation\n    if (!values.date) {\n        errors.date = \"Date is required.\";\n    } else if (new Date(values.date) <= today) {\n        errors.date = \"Date must be in the future.\";\n    }\n\n    // Location Validation\n    if (!values.location) {\n        errors.location = \"Location is required.\";\n    }\n\n    // Tournament Type Validation\n    if (!values.tournamentType) {\n        errors.tournamentType = \"Tournament type is required.\";\n    }\n\n    // Playoff Type Validation\n    if (!values.playoffType) {\n        errors.playoffType = \"Playoff type is required.\";\n    }\n\n    if (!values.totalTeams) {\n        errors.totalTeams = \"Total Teams is required.\";\n    } else if (isNaN(values.totalTeams)) {\n        errors.totalTeams = \"Total Teams must be a number.\";\n    }\n\n    if (!values.poolNumber) {\n        errors.poolNumber = \"Pool number is required.\";\n    } else if (isNaN(values.poolNumber)) {\n        errors.poolNumber = \"Pool number must be a number.\";\n    }\n\n    // Playoff Bracket Number Validation\n    if (!values.playoffBracketNumber) {\n        errors.playoffBracketNumber = \"Playoff bracket number is required.\";\n    } else if (isNaN(values.playoffBracketNumber)) {\n        errors.playoffBracketNumber = \"Playoff bracket must be a number.\";\n    }\n\n    // Time Validation (Ensure a time is selected)\n    if (!values.time) {\n        errors.time = \"Start time is required.\";\n    }\n\n    // Prizes Validation (Only required if prizes === true)\n    if (values.prizes) {\n        if (!values.firstPlacePrize) {\n            errors.firstPlacePrize = \"First place prize is required if prizes are enabled.\";\n        }\n    }\n\n    return errors;\n};\n"],"mappings":"AAAA,OAAO,MAAMA,4BAA4B,GAAIC,MAAM,IAAK;EACpD,MAAMC,MAAM,GAAG,CAAC,CAAC;EACjB,MAAMC,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC;EACxBC,OAAO,CAACC,GAAG,CAAC,kEAAkE,EAAE,iBAAiB,EAAEL,MAAM,CAAC;EAC1G;EACA,IAAI,CAACA,MAAM,CAACM,IAAI,EAAE;IACdL,MAAM,CAACK,IAAI,GAAG,8BAA8B;EAChD,CAAC,MAAM,IAAIN,MAAM,CAACM,IAAI,CAACC,MAAM,GAAG,CAAC,EAAE;IAC/BN,MAAM,CAACK,IAAI,GAAG,gDAAgD;EAClE,CAAC,MAAM,IAAIN,MAAM,CAACM,IAAI,CAACC,MAAM,GAAG,EAAE,EAAE;IAChCN,MAAM,CAACK,IAAI,GAAG,kDAAkD;EACpE;;EAEA;EACA,IAAI,CAACN,MAAM,CAACQ,IAAI,EAAE;IACdP,MAAM,CAACO,IAAI,GAAG,mBAAmB;EACrC,CAAC,MAAM,IAAI,IAAIL,IAAI,CAACH,MAAM,CAACQ,IAAI,CAAC,IAAIN,KAAK,EAAE;IACvCD,MAAM,CAACO,IAAI,GAAG,6BAA6B;EAC/C;;EAEA;EACA,IAAI,CAACR,MAAM,CAACS,QAAQ,EAAE;IAClBR,MAAM,CAACQ,QAAQ,GAAG,uBAAuB;EAC7C;;EAEA;EACA,IAAI,CAACT,MAAM,CAACU,cAAc,EAAE;IACxBT,MAAM,CAACS,cAAc,GAAG,8BAA8B;EAC1D;;EAEA;EACA,IAAI,CAACV,MAAM,CAACW,WAAW,EAAE;IACrBV,MAAM,CAACU,WAAW,GAAG,2BAA2B;EACpD;EAEA,IAAI,CAACX,MAAM,CAACY,UAAU,EAAE;IACpBX,MAAM,CAACW,UAAU,GAAG,0BAA0B;EAClD,CAAC,MAAM,IAAIC,KAAK,CAACb,MAAM,CAACY,UAAU,CAAC,EAAE;IACjCX,MAAM,CAACW,UAAU,GAAG,+BAA+B;EACvD;EAEA,IAAI,CAACZ,MAAM,CAACc,UAAU,EAAE;IACpBb,MAAM,CAACa,UAAU,GAAG,0BAA0B;EAClD,CAAC,MAAM,IAAID,KAAK,CAACb,MAAM,CAACc,UAAU,CAAC,EAAE;IACjCb,MAAM,CAACa,UAAU,GAAG,+BAA+B;EACvD;;EAEA;EACA,IAAI,CAACd,MAAM,CAACe,oBAAoB,EAAE;IAC9Bd,MAAM,CAACc,oBAAoB,GAAG,qCAAqC;EACvE,CAAC,MAAM,IAAIF,KAAK,CAACb,MAAM,CAACe,oBAAoB,CAAC,EAAE;IAC3Cd,MAAM,CAACc,oBAAoB,GAAG,mCAAmC;EACrE;;EAEA;EACA,IAAI,CAACf,MAAM,CAACgB,IAAI,EAAE;IACdf,MAAM,CAACe,IAAI,GAAG,yBAAyB;EAC3C;;EAEA;EACA,IAAIhB,MAAM,CAACiB,MAAM,EAAE;IACf,IAAI,CAACjB,MAAM,CAACkB,eAAe,EAAE;MACzBjB,MAAM,CAACiB,eAAe,GAAG,sDAAsD;IACnF;EACJ;EAEA,OAAOjB,MAAM;AACjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}