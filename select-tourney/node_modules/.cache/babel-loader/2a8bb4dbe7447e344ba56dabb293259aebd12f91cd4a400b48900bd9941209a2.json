{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { baseUrl } from '../../app/shared/baseUrl';\nexport const fetchTournaments = createAsyncThunk('tournaments/fetchTournaments', async () => {\n  const response = await fetch(baseUrl + 'tournaments');\n  if (!response.ok) {\n    return Promise.reject('Unable to fetch, status: ' + response.status);\n  }\n  const data = await response.json();\n  return data;\n});\n\n/**\n * Post a new comment to the API\n */\nexport const postTournament = createAsyncThunk('tournaments/postTournament', async (comment, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch(baseUrl + 'comments', {\n      method: \"POST\",\n      body: JSON.stringify(comment),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to post comment: ${response.status}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nconst initialState = {\n  tournamentsArray: [],\n  isLoading: true,\n  errMsg: ''\n};\nconst tournamentsSlice = createSlice({\n  name: 'tournaments',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchTournaments.pending, state => {\n      state.isLoading = true;\n    }).addCase(fetchTournaments.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.errMsg = '';\n      state.tournamentsArray = action.payload;\n    }).addCase(fetchTournaments.rejected, (state, action) => {\n      state.isLoading = false;\n      state.errMsg = action.error ? action.error.message : 'Fetch failed';\n    }).addCase(postTournament.fulfilled, (state, action) => {\n      state.tournamentsArray.push(action.payload);\n    }).addCase(postTournament.rejected, (state, action) => {\n      alert(`Your comment could not be posted\\nError: ` + (action.payload || 'Fetch Failed'));\n    });\n  }\n});\nexport const tournamentsReducer = tournamentsSlice.reducer;\nexport const selectAllTournaments = state => {\n  return state.tournaments.tournamentsArray;\n};\nexport const selectCurrentTournaments = state => {\n  const today = new Date().toISOString().split('T')[0];\n  return state.tournaments.tournamentsArray.filter(tournament => tournament.date_utc.startsWith(today));\n};\nexport const selectPastTournaments = state => {\n  //return filter of past tournaments\n  const today = new Date().toISOString();\n  return state.tournaments.tournamentsArray.filter(tournament => tournament.date_utc < today);\n};\nexport const selectUpcomingTournaments = state => {\n  //return filter of past tournaments\n  const today = new Date().toISOString();\n  return state.tournaments.tournamentsArray.filter(tournament => tournament.date_utc > today);\n};\nexport const selectTournamentById = id => state => {\n  return state.tournaments.tournamentsArray.find(tournament => tournament.id === parseInt(id));\n};","map":{"version":3,"names":["createSlice","createAsyncThunk","baseUrl","fetchTournaments","response","fetch","ok","Promise","reject","status","data","json","postTournament","comment","rejectWithValue","method","body","JSON","stringify","headers","Error","error","message","initialState","tournamentsArray","isLoading","errMsg","tournamentsSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","push","alert","tournamentsReducer","reducer","selectAllTournaments","tournaments","selectCurrentTournaments","today","Date","toISOString","split","filter","tournament","date_utc","startsWith","selectPastTournaments","selectUpcomingTournaments","selectTournamentById","id","find","parseInt"],"sources":["/Users/ag/Desktop/SelectTourney/select-tourney/src/features/tournaments/tournamentsSlice.js"],"sourcesContent":["\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { baseUrl } from '../../app/shared/baseUrl';\n\n\nexport const fetchTournaments = createAsyncThunk(\n    'tournaments/fetchTournaments',\n    async () => {\n        const response = await fetch(baseUrl + 'tournaments');\n        if (!response.ok) {\n            return Promise.reject('Unable to fetch, status: ' + response.status);\n        }\n        const data = await response.json();\n        return data;\n    }\n);\n\n/**\n * Post a new comment to the API\n */\nexport const postTournament = createAsyncThunk(\n    'tournaments/postTournament',\n    async (comment, { rejectWithValue }) => {\n        try {\n            const response = await fetch(baseUrl + 'comments', {\n                method: \"POST\",\n                body: JSON.stringify(comment),\n                headers: { 'Content-Type': 'application/json' }\n            });\n\n            if (!response.ok) {\n                throw new Error(`Failed to post comment: ${response.status}`);\n            }\n\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            return rejectWithValue(error.message);\n        }\n    }\n);\n\nconst initialState = {\n    tournamentsArray: [],\n    isLoading: true,\n    errMsg: ''\n};\n\nconst tournamentsSlice = createSlice({\n    name: 'tournaments',\n    initialState,\n    reducers: {},\n    extraReducers: (builder) => {\n        builder\n            .addCase(fetchTournaments.pending, (state) => {\n                state.isLoading = true;\n            })\n            .addCase(fetchTournaments.fulfilled, (state, action) => {\n                state.isLoading = false;\n                state.errMsg = '';\n                state.tournamentsArray = action.payload;\n            })\n            .addCase(fetchTournaments.rejected, (state, action) => {\n                state.isLoading = false;\n                state.errMsg = action.error ? action.error.message : 'Fetch failed';\n            })\n\n            .addCase(postTournament.fulfilled, (state, action) => {\n                state.tournamentsArray.push(action.payload);\n            })\n            \n            .addCase(postTournament.rejected, (state, action) => {\n                alert(`Your comment could not be posted\\nError: ` + (action.payload || 'Fetch Failed'));\n            });\n    }\n});\n\nexport const tournamentsReducer = tournamentsSlice.reducer;\n\nexport const selectAllTournaments = (state) => {\n    return state.tournaments.tournamentsArray;\n};\n\nexport const selectCurrentTournaments = (state) => {\n    const today = new Date().toISOString().split('T')[0];\n    return state.tournaments.tournamentsArray.filter(tournament => tournament.date_utc.startsWith(today));\n};\n\nexport const selectPastTournaments = (state) => {\n    //return filter of past tournaments\n    const today = new Date().toISOString();\n    return state.tournaments.tournamentsArray.filter(tournament => tournament.date_utc < today);\n};\n\nexport const selectUpcomingTournaments = (state) => {\n    //return filter of past tournaments\n    const today = new Date().toISOString();\n    return state.tournaments.tournamentsArray.filter(tournament => tournament.date_utc > today);\n};\n\nexport const selectTournamentById = (id) => (state) => {\n    return state.tournaments.tournamentsArray.find(\n        (tournament) => tournament.id === parseInt(id)\n    );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}