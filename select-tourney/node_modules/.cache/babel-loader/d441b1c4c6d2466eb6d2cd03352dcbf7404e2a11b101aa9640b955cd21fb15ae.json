{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { baseUrl } from '../../app/shared/baseUrl';\nexport const fetchTournaments = createAsyncThunk('tournaments/fetchTournaments', async () => {\n  const response = await fetch(`${baseUrl}tournaments`);\n  if (!response.ok) {\n    return Promise.reject(`Unable to fetch, status: ${response.status}`);\n  }\n  const data = await response.json();\n  return data;\n});\nexport const postTournament = createAsyncThunk('tournaments/postTournament', async (tournament, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch(`${baseUrl}tournaments`, {\n      method: \"POST\",\n      body: JSON.stringify(tournament),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to post tournament: ${response.status}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nconst initialState = {\n  tournaments: [],\n  currentTournaments: [],\n  pastTournaments: [],\n  upcomingTournaments: [],\n  isLoading: true,\n  errMsg: ''\n};\nconst categorizeTournaments = tournaments => {\n  const today = new Date().toISOString().split('T')[0]; // Extract YYYY-MM-DD\n\n  return {\n    currentTournaments: tournaments.filter(tournament => tournament.date_utc.startsWith(today)).map(({\n      id,\n      name,\n      date_utc\n    }) => ({\n      id,\n      name,\n      date_utc\n    })),\n    pastTournaments: tournaments.filter(tournament => tournament.date_utc < today).map(({\n      id,\n      name,\n      date_utc\n    }) => ({\n      id,\n      name,\n      date_utc\n    })),\n    upcomingTournaments: tournaments.filter(tournament => tournament.date_utc > today)\n  };\n};\nconst tournamentsSlice = createSlice({\n  name: 'tournaments',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchTournaments.pending, state => {\n      state.isLoading = true;\n    }).addCase(fetchTournaments.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.errMsg = '';\n      state.tournaments = action.payload;\n\n      // Categorize and update state\n      const {\n        currentTournaments,\n        pastTournaments,\n        upcomingTournaments\n      } = categorizeTournaments(action.payload);\n      state.currentTournaments = currentTournaments;\n      state.pastTournaments = pastTournaments;\n      state.upcomingTournaments = upcomingTournaments;\n    }).addCase(fetchTournaments.rejected, (state, action) => {\n      state.isLoading = false;\n      state.errMsg = action.error ? action.error.message : 'Fetch failed';\n    }).addCase(postTournament.fulfilled, (state, action) => {\n      state.tournaments.push(action.payload);\n\n      // Re-categorize after posting a new tournament\n      const {\n        currentTournaments,\n        pastTournaments,\n        upcomingTournaments\n      } = categorizeTournaments(state.tournaments);\n      state.currentTournaments = currentTournaments;\n      state.pastTournaments = pastTournaments;\n      state.upcomingTournaments = upcomingTournaments;\n    }).addCase(postTournament.rejected, (state, action) => {\n      alert(`Your tournament could not be posted\\nError: ` + (action.payload || 'Fetch Failed'));\n    });\n  }\n});\nexport const tournamentsReducer = tournamentsSlice.reducer;\n\n// Updated selectors\nexport const selectAllTournaments = state => state.tournaments.tournaments;\nexport const selectCurrentTournaments = state => state.tournaments.currentTournaments;\nexport const selectPastTournaments = state => state.tournaments.pastTournaments;\nexport const selectUpcomingTournaments = state => state.tournaments.upcomingTournaments;\nexport const selectTournamentById = id => state => {\n  return state.tournaments.tournaments.find(tournament => tournament.id === parseInt(id));\n};\nexport const selectFeaturedTournaments = state => {\n  return state.tournaments.upcomingTournaments.filter(tournament => tournament.is_featured === true);\n};","map":{"version":3,"names":["createSlice","createAsyncThunk","baseUrl","fetchTournaments","response","fetch","ok","Promise","reject","status","data","json","postTournament","tournament","rejectWithValue","method","body","JSON","stringify","headers","Error","error","message","initialState","tournaments","currentTournaments","pastTournaments","upcomingTournaments","isLoading","errMsg","categorizeTournaments","today","Date","toISOString","split","filter","date_utc","startsWith","map","id","name","tournamentsSlice","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","push","alert","tournamentsReducer","reducer","selectAllTournaments","selectCurrentTournaments","selectPastTournaments","selectUpcomingTournaments","selectTournamentById","find","parseInt","selectFeaturedTournaments","is_featured"],"sources":["/Users/ag/Desktop/SelectTourney/select-tourney/src/features/tournaments/tournamentsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { baseUrl } from '../../app/shared/baseUrl';\n\nexport const fetchTournaments = createAsyncThunk(\n    'tournaments/fetchTournaments',\n    async () => {\n        const response = await fetch(`${baseUrl}tournaments`);\n        if (!response.ok) {\n            return Promise.reject(`Unable to fetch, status: ${response.status}`);\n        }\n        const data = await response.json();\n        return data;\n    }\n);\n\nexport const postTournament = createAsyncThunk(\n    'tournaments/postTournament',\n    async (tournament, { rejectWithValue }) => {\n        try {\n            const response = await fetch(`${baseUrl}tournaments`, {\n                method: \"POST\",\n                body: JSON.stringify(tournament),\n                headers: { 'Content-Type': 'application/json' }\n            });\n\n            if (!response.ok) {\n                throw new Error(`Failed to post tournament: ${response.status}`);\n            }\n\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            return rejectWithValue(error.message);\n        }\n    }\n);\n\nconst initialState = {\n    tournaments: [],\n    currentTournaments: [],\n    pastTournaments: [],\n    upcomingTournaments: [],\n    isLoading: true,\n    errMsg: ''\n};\n\nconst categorizeTournaments = (tournaments) => {\n    const today = new Date().toISOString().split('T')[0]; // Extract YYYY-MM-DD\n\n    return {\n        currentTournaments: tournaments\n            .filter(tournament => tournament.date_utc.startsWith(today))\n            .map(({ id, name, date_utc }) => ({ id, name, date_utc })),\n\n        pastTournaments: tournaments\n            .filter(tournament => tournament.date_utc < today)\n            .map(({ id, name, date_utc }) => ({ id, name, date_utc })),\n\n        upcomingTournaments: tournaments\n            .filter(tournament => tournament.date_utc > today)\n    };\n};\n\nconst tournamentsSlice = createSlice({\n    name: 'tournaments',\n    initialState,\n    reducers: {},\n    extraReducers: (builder) => {\n        builder\n            .addCase(fetchTournaments.pending, (state) => {\n                state.isLoading = true;\n            })\n            .addCase(fetchTournaments.fulfilled, (state, action) => {\n                state.isLoading = false;\n                state.errMsg = '';\n                state.tournaments = action.payload;\n\n                // Categorize and update state\n                const { currentTournaments, pastTournaments, upcomingTournaments } = categorizeTournaments(action.payload);\n                state.currentTournaments = currentTournaments;\n                state.pastTournaments = pastTournaments;\n                state.upcomingTournaments = upcomingTournaments;\n            })\n            .addCase(fetchTournaments.rejected, (state, action) => {\n                state.isLoading = false;\n                state.errMsg = action.error ? action.error.message : 'Fetch failed';\n            })\n            .addCase(postTournament.fulfilled, (state, action) => {\n                state.tournaments.push(action.payload);\n\n                // Re-categorize after posting a new tournament\n                const { currentTournaments, pastTournaments, upcomingTournaments } = categorizeTournaments(state.tournaments);\n                state.currentTournaments = currentTournaments;\n                state.pastTournaments = pastTournaments;\n                state.upcomingTournaments = upcomingTournaments;\n            })\n            .addCase(postTournament.rejected, (state, action) => {\n                alert(`Your tournament could not be posted\\nError: ` + (action.payload || 'Fetch Failed'));\n            });\n    }\n});\n\nexport const tournamentsReducer = tournamentsSlice.reducer;\n\n// Updated selectors\nexport const selectAllTournaments = (state) => state.tournaments.tournaments;\nexport const selectCurrentTournaments = (state) => state.tournaments.currentTournaments;\nexport const selectPastTournaments = (state) => state.tournaments.pastTournaments;\nexport const selectUpcomingTournaments = (state) => state.tournaments.upcomingTournaments;\n\nexport const selectTournamentById = (id) => (state) => {\n    return state.tournaments.tournaments.find(\n        (tournament) => tournament.id === parseInt(id)\n    );\n};\n\nexport const selectFeaturedTournaments = (state) => {\n    return state.tournaments.upcomingTournaments.filter(\n        (tournament) => tournament.is_featured === true\n    );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}