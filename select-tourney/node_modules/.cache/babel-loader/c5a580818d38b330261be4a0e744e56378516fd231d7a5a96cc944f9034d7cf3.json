{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { ThemeProvider } from 'styled-components';\nimport { generatePreviousRound } from '../core/match-functions';\nimport { calculateSVGDimensions } from '../core/calculate-svg-dimensions';\nimport { MatchContextProvider } from '../core/match-context';\nimport { defaultStyle, getCalculatedStyles } from '../settings';\nimport defaultTheme from '../themes/themes';\nimport UpperBracket from './upper-bracket';\nimport LowerBracket from './lower-bracket';\nimport RoundHeaders from './round-headers';\nimport FinalGame from './final-game';\nimport ExtraFinal from './extra-final';\nfunction findTheFinals(matches) {\n  const isFinalInUpper = matches.upper.some(match => !match.nextMatchId);\n  const isFinalInLower = matches.lower.some(match => !match.nextMatchId);\n  let convergingMatch;\n  let finalsArray;\n  if (isFinalInLower) {\n    const lastUpper = matches.upper.find(match => {\n      const hasNextMatchInUpper = matches.upper.some(m => m.id === match.nextMatchId);\n      return !hasNextMatchInUpper;\n    });\n    convergingMatch = matches.lower.find(match => match.id === lastUpper.nextMatchId);\n    finalsArray = [convergingMatch, matches.lower.find(m => m.id === convergingMatch.nextMatchId)].filter(m => m === null || m === void 0 ? void 0 : m.id);\n  }\n  if (isFinalInUpper) {\n    const lastLower = matches.lower.find(match => {\n      const hasNextMatchInLower = matches.lower.some(m => m.id === match.nextMatchId);\n      return !hasNextMatchInLower;\n    });\n    convergingMatch = matches.upper.find(match => match.id === lastLower.nextMatchId);\n    finalsArray = [convergingMatch, matches.upper.find(m => m.id === convergingMatch.nextMatchId)].filter(m => m === null || m === void 0 ? void 0 : m.id);\n  }\n  return {\n    convergingMatch,\n    finalsArray\n  };\n}\nconst DoubleEliminationBracket = ({\n  matches,\n  matchComponent,\n  currentRound,\n  onMatchClick,\n  onPartyClick,\n  svgWrapper: SvgWrapper = ({\n    children\n  }) => _jsx(\"div\", {\n    children: children\n  }),\n  theme = defaultTheme,\n  options: {\n    style: inputStyle\n  } = {\n    style: defaultStyle\n  }\n}) => {\n  const style = Object.assign(Object.assign(Object.assign({}, defaultStyle), inputStyle), {\n    roundHeader: Object.assign(Object.assign({}, defaultStyle.roundHeader), inputStyle.roundHeader),\n    lineInfo: Object.assign(Object.assign({}, defaultStyle.lineInfo), inputStyle.lineInfo)\n  });\n  const calculatedStyles = getCalculatedStyles(style);\n  const {\n    roundHeader,\n    columnWidth,\n    canvasPadding,\n    rowHeight\n  } = calculatedStyles;\n  const {\n    convergingMatch,\n    finalsArray\n  } = findTheFinals(matches);\n  const hasMultipleFinals = (finalsArray === null || finalsArray === void 0 ? void 0 : finalsArray.length) > 1;\n  const generateColumn = (matchesColumn, listOfMatches) => {\n    const previousMatchesColumn = generatePreviousRound(matchesColumn, listOfMatches);\n    if (previousMatchesColumn.length > 0) {\n      return [...generateColumn(previousMatchesColumn, listOfMatches), previousMatchesColumn];\n    }\n    return [previousMatchesColumn];\n  };\n  const generate2DBracketArray = (final, listOfMatches) => {\n    return final ? [...generateColumn([final], listOfMatches), []].filter(arr => arr.length > 0) : [];\n  };\n  const upperColumns = generate2DBracketArray(convergingMatch, matches.upper);\n  const lowerColumns = generate2DBracketArray(convergingMatch, matches.lower);\n  const totalNumOfRounds = lowerColumns.length + 1 + (hasMultipleFinals && finalsArray.length - 1);\n  const upperBracketDimensions = calculateSVGDimensions(upperColumns[0].length, upperColumns.length, rowHeight, columnWidth, canvasPadding, roundHeader, currentRound);\n  const lowerBracketDimensions = calculateSVGDimensions(lowerColumns[0].length, lowerColumns.length, rowHeight, columnWidth, canvasPadding, roundHeader, currentRound);\n  const fullBracketDimensions = calculateSVGDimensions(lowerColumns[0].length, totalNumOfRounds, rowHeight, columnWidth, canvasPadding, roundHeader, currentRound);\n  const {\n    gameWidth\n  } = fullBracketDimensions;\n  const gameHeight = upperBracketDimensions.gameHeight + lowerBracketDimensions.gameHeight;\n  const {\n    startPosition\n  } = upperBracketDimensions;\n  return _jsx(ThemeProvider, Object.assign({\n    theme: theme\n  }, {\n    children: _jsx(SvgWrapper, Object.assign({\n      bracketWidth: gameWidth,\n      bracketHeight: gameHeight,\n      startAt: startPosition\n    }, {\n      children: _jsx(\"svg\", Object.assign({\n        height: gameHeight,\n        width: gameWidth,\n        viewBox: `0 0 ${gameWidth} ${gameHeight}`\n      }, {\n        children: _jsx(MatchContextProvider, {\n          children: _jsxs(\"g\", {\n            children: [_jsx(RoundHeaders, Object.assign({}, {\n              numOfRounds: totalNumOfRounds,\n              calculatedStyles\n            })), _jsx(UpperBracket, Object.assign({}, {\n              columns: upperColumns,\n              calculatedStyles,\n              gameHeight,\n              gameWidth,\n              onMatchClick,\n              onPartyClick,\n              matchComponent\n            })), _jsx(LowerBracket, Object.assign({}, {\n              columns: lowerColumns,\n              calculatedStyles,\n              gameHeight,\n              gameWidth,\n              onMatchClick,\n              onPartyClick,\n              matchComponent,\n              upperBracketHeight: upperBracketDimensions.gameHeight\n            })), _jsx(FinalGame, Object.assign({}, {\n              match: convergingMatch,\n              numOfUpperRounds: upperColumns.length,\n              numOfLowerRounds: lowerColumns.length,\n              bracketSnippet: {\n                previousTopMatch: upperColumns[upperColumns.length - 1][0],\n                previousBottomMatch: lowerColumns[lowerColumns.length - 1][0],\n                currentMatch: convergingMatch\n              },\n              upperBracketHeight: upperBracketDimensions.gameHeight,\n              lowerBracketHeight: lowerBracketDimensions.gameHeight,\n              calculatedStyles,\n              columnIndex: lowerColumns.length,\n              rowIndex: 0,\n              gameHeight,\n              gameWidth,\n              matchComponent,\n              onMatchClick,\n              onPartyClick\n            })), (finalsArray === null || finalsArray === void 0 ? void 0 : finalsArray.length) > 1 && _jsx(ExtraFinal, Object.assign({}, {\n              match: finalsArray[1],\n              numOfUpperRounds: upperColumns.length,\n              numOfLowerRounds: lowerColumns.length,\n              bracketSnippet: {\n                previousBottomMatch: finalsArray[0],\n                currentMatch: finalsArray[1]\n              },\n              upperBracketHeight: upperBracketDimensions.gameHeight,\n              lowerBracketHeight: lowerBracketDimensions.gameHeight,\n              calculatedStyles,\n              columnIndex: lowerColumns.length + 1,\n              rowIndex: 0,\n              gameHeight,\n              gameWidth,\n              matchComponent,\n              onMatchClick,\n              onPartyClick\n            }))]\n          })\n        })\n      }))\n    }))\n  }));\n};\nexport default DoubleEliminationBracket;\n//# sourceMappingURL=double-elim-bracket.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}