{"ast":null,"code":"import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport useMatchHighlightContext from '../hooks/use-match-highlight';\nimport { getCalculatedStyles } from '../settings';\nconst Connector = ({\n  bracketSnippet,\n  previousBottomMatchPosition = null,\n  previousTopMatchPosition = null,\n  currentMatchPosition,\n  style\n}) => {\n  const {\n    boxHeight,\n    connectorColor,\n    roundHeader,\n    roundSeparatorWidth,\n    lineInfo,\n    horizontalOffset,\n    connectorColorHighlight,\n    width\n  } = getCalculatedStyles(style);\n  const pathInfo = multiplier => {\n    const middlePointOfMatchComponent = boxHeight / 2;\n    const previousMatch = multiplier > 0 ? previousBottomMatchPosition : previousTopMatchPosition;\n    const startPoint = `${currentMatchPosition.x - horizontalOffset - lineInfo.separation} ${currentMatchPosition.y + lineInfo.homeVisitorSpread * multiplier + middlePointOfMatchComponent + (roundHeader.isShown ? roundHeader.height + roundHeader.marginBottom : 0)}`;\n    const horizontalWidthLeft = currentMatchPosition.x - roundSeparatorWidth / 2 - horizontalOffset;\n    const isPreviousMatchOnSameYLevel = Math.abs(currentMatchPosition.y - previousMatch.y) < 1;\n    const verticalHeight = previousMatch.y + middlePointOfMatchComponent + (roundHeader.isShown ? roundHeader.height + roundHeader.marginBottom : 0);\n    const horizontalWidthRight = previousMatch.x + width;\n    if (isPreviousMatchOnSameYLevel) {\n      return [`M${startPoint}`, `H${horizontalWidthRight}`];\n    }\n    return [`M${startPoint}`, `H${horizontalWidthLeft}`, `V${verticalHeight}`, `H${horizontalWidthRight}`];\n  };\n  const {\n    topHighlighted,\n    bottomHighlighted\n  } = useMatchHighlightContext({\n    bracketSnippet\n  });\n  const {\n    x,\n    y\n  } = currentMatchPosition;\n  return _jsxs(_Fragment, {\n    children: [previousTopMatchPosition && _jsx(\"path\", {\n      d: pathInfo(-1).join(' '),\n      id: `connector-${x}-${y}-${-1}`,\n      fill: \"transparent\",\n      stroke: topHighlighted ? connectorColorHighlight : connectorColor\n    }), previousBottomMatchPosition && _jsx(\"path\", {\n      d: pathInfo(1).join(' '),\n      id: `connector-${x}-${y}-${1}`,\n      fill: \"transparent\",\n      stroke: bottomHighlighted ? connectorColorHighlight : connectorColor\n    }), topHighlighted && _jsx(\"use\", {\n      href: `connector-${x}-${y}-${-1}`\n    }), bottomHighlighted && _jsx(\"use\", {\n      href: `connector-${x}-${y}-${1}`\n    })]\n  });\n};\nexport default Connector;\n//# sourceMappingURL=connector.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}