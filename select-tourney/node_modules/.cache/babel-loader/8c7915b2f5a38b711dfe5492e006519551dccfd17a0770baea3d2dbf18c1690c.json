{"ast":null,"code":"var _jsxFileName = \"/Users/ag/Desktop/SelectTourney/select-tourney/src/components/google/PlacesAutoComplete.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from \"react\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport { FormGroup, Label, Button } from \"reactstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GOOGLE_API_KEY = \"AIzaSyDsb32EFWC9jVcxoQe6chZ55HRU6ibVC6Y\"; // Store in environment variables\n\nconst PlaceAutocompleteComponent = () => {\n  _s();\n  const autocompleteContainerRef = useRef(null);\n  const inputSearch = useRef(null);\n  const [selectedPlace, setSelectedPlace] = useState(null);\n  useEffect(() => {\n    // ✅ Load Google Maps Places API dynamically\n    const loadGoogleMaps = async () => {\n      if (window.google && window.google.maps) {\n        initializeAutocomplete();\n        return;\n      }\n      const script = document.createElement(\"script\");\n      script.src = `https://maps.googleapis.com/maps/api/js?key=${GOOGLE_API_KEY}`;\n      script.async = true;\n      script.defer = true;\n      script.onload = initializeAutocomplete;\n      document.body.appendChild(script);\n    };\n\n    // ✅ Initialize PlaceAutocompleteElement\n    const initializeAutocomplete = async () => {\n      try {\n        // @ts-ignore\n        await window.google.maps.importLibrary(\"places\");\n        // console.log('%csrc/components/google/PlacesAutoComplete.js:30 window.google.maps.places', 'color: #007acc;', window.google.maps.places);\n        // console.log('%csrc/components/google/PlacesAutoComplete.js:30 window.google.maps.places', 'color: #007acc;', window.google.maps.places.SearchBox);\n        // ✅ Create and append the PlaceAutocompleteElement\n        // @ts-ignore\n        // const placeAutocomplete = new window.google.maps.places.PlaceAutocompleteElement();\n\n        const searchBox = new window.google.maps.places.SearchBox(inputSearch.current);\n        searchBox.addListener(\"places_changed\", () => {\n          const places = searchBox.getPlaces();\n          if (places.length == 0) {\n            return;\n          }\n        });\n      } catch (error) {\n        console.error(\"Google Maps API failed to load:\", error);\n      }\n    };\n    loadGoogleMaps();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Google Places Autocomplete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: inputSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), selectedPlace && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Selected Place:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(selectedPlace, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(PlaceAutocompleteComponent, \"KIFor2Nv6uipbcXFq/X+fqbGxdg=\");\n_c = PlaceAutocompleteComponent;\nexport default PlaceAutocompleteComponent;\nvar _c;\n$RefreshReg$(_c, \"PlaceAutocompleteComponent\");","map":{"version":3,"names":["useEffect","useRef","useState","Formik","Field","Form","ErrorMessage","FormGroup","Label","Button","jsxDEV","_jsxDEV","GOOGLE_API_KEY","PlaceAutocompleteComponent","_s","autocompleteContainerRef","inputSearch","selectedPlace","setSelectedPlace","loadGoogleMaps","window","google","maps","initializeAutocomplete","script","document","createElement","src","async","defer","onload","body","appendChild","importLibrary","searchBox","places","SearchBox","current","addListener","getPlaces","length","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","style","marginTop","JSON","stringify","_c","$RefreshReg$"],"sources":["/Users/ag/Desktop/SelectTourney/select-tourney/src/components/google/PlacesAutoComplete.js"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport { FormGroup, Label, Button } from \"reactstrap\";\n\nconst GOOGLE_API_KEY = \"AIzaSyDsb32EFWC9jVcxoQe6chZ55HRU6ibVC6Y\"; // Store in environment variables\n\nconst PlaceAutocompleteComponent = () => {\n  const autocompleteContainerRef = useRef(null);\n  const inputSearch = useRef(null);\n  const [selectedPlace, setSelectedPlace] = useState(null);\n\n  useEffect(() => {\n    // ✅ Load Google Maps Places API dynamically\n    const loadGoogleMaps = async () => {\n      if (window.google && window.google.maps) {\n        initializeAutocomplete();\n        return;\n      }\n\n      const script = document.createElement(\"script\");\n      script.src = `https://maps.googleapis.com/maps/api/js?key=${GOOGLE_API_KEY}`;\n      script.async = true;\n      script.defer = true;\n      script.onload = initializeAutocomplete;\n      document.body.appendChild(script);\n    };\n\n    // ✅ Initialize PlaceAutocompleteElement\n    const initializeAutocomplete = async () => {\n      try {\n        // @ts-ignore\n        await window.google.maps.importLibrary(\"places\");\n        // console.log('%csrc/components/google/PlacesAutoComplete.js:30 window.google.maps.places', 'color: #007acc;', window.google.maps.places);\n        // console.log('%csrc/components/google/PlacesAutoComplete.js:30 window.google.maps.places', 'color: #007acc;', window.google.maps.places.SearchBox);\n        // ✅ Create and append the PlaceAutocompleteElement\n        // @ts-ignore\n        // const placeAutocomplete = new window.google.maps.places.PlaceAutocompleteElement();\n\n\n        const searchBox = new window.google.maps.places.SearchBox(inputSearch.current);\n\n        searchBox.addListener(\"places_changed\", () => {\n          const places = searchBox.getPlaces();\n          if (places.length == 0) {\n            return;\n          }\n        });    \n      } catch (error) {\n        console.error(\"Google Maps API failed to load:\", error);\n      }\n    };\n\n    loadGoogleMaps();\n  }, []);\n\n  return (\n    <div>\n      <h2>Google Places Autocomplete</h2>\n      {/* Container for Google Places input */}\n      <input ref={inputSearch}/>\n\n      {/* Display Selected Place Info */}\n      {selectedPlace && (\n        <div style={{ marginTop: \"20px\" }}>\n          <h3>Selected Place:</h3>\n          <pre>{JSON.stringify(selectedPlace, null, 2)}</pre>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PlaceAutocompleteComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}