{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { baseUrl } from '../../app/shared/baseUrl';\n\n// Thunk to fetch all tournament-related data\nexport const fetchAllTournamentData = createAsyncThunk('tournaments/fetchAllTournamentData', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch(baseUrl); // Ensure baseUrl ends with a slash\n    if (!response.ok) {\n      throw new Error(`Unable to fetch, status: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const postTournament = createAsyncThunk('tournaments/postTournament', async (newTournament, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch(`${baseUrl}tournaments`, {\n      method: 'POST',\n      body: JSON.stringify(newTournament),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to post tournament: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nconst initialState = {\n  tournaments: [],\n  teams: [],\n  pools: [],\n  brackets: [],\n  isLoading: true,\n  errMsg: ''\n};\nconst tournamentsSlice = createSlice({\n  name: 'tournaments',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchAllTournamentData.pending, state => {\n      state.isLoading = true;\n    }).addCase(fetchAllTournamentData.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.errMsg = '';\n      state.tournaments = action.payload.tournaments || [];\n      state.teams = action.payload.teams || [];\n      state.pools = action.payload.pools || [];\n      state.brackets = action.payload.brackets || [];\n    }).addCase(fetchAllTournamentData.rejected, (state, action) => {\n      state.isLoading = false;\n      state.errMsg = action.payload || 'Fetch failed';\n    }).addCase(postTournament.fulfilled, (state, action) => {\n      state.tournaments.push(action.payload);\n    }).addCase(postTournament.rejected, (state, action) => {\n      alert(`Your tournament could not be posted\\nError: ${action.payload || 'Unknown error'}`);\n    });\n  }\n});\nexport const tournamentsReducer = tournamentsSlice.reducer;\n\n// Selectors\nexport const selectAllTournaments = state => state.tournaments.tournaments || [];\nexport const selectTournamentById = id => state => {\n  var _state$tournaments$to;\n  return (_state$tournaments$to = state.tournaments.tournaments) === null || _state$tournaments$to === void 0 ? void 0 : _state$tournaments$to.find(t => t.id === parseInt(id));\n};\nexport const selectTeamsByTournamentId = id => state => {\n  var _state$tournaments$te;\n  return (_state$tournaments$te = state.tournaments.teams) === null || _state$tournaments$te === void 0 ? void 0 : _state$tournaments$te.filter(t => t.tournamentId === parseInt(id));\n};\nexport const selectPoolsByTournamentId = id => state => {\n  var _state$tournaments$po;\n  return (_state$tournaments$po = state.tournaments.pools) === null || _state$tournaments$po === void 0 ? void 0 : _state$tournaments$po.filter(p => p.tournamentId === parseInt(id));\n};\nexport const selectBracketsByTournamentId = id => state => {\n  var _state$tournaments$br;\n  return (_state$tournaments$br = state.tournaments.brackets) === null || _state$tournaments$br === void 0 ? void 0 : _state$tournaments$br.filter(b => b.tournamentId === parseInt(id));\n};\nexport const selectUpcomingTournaments = state => {\n  var _state$tournaments$to2;\n  const today = new Date().toISOString();\n  return ((_state$tournaments$to2 = state.tournaments.tournaments) === null || _state$tournaments$to2 === void 0 ? void 0 : _state$tournaments$to2.filter(t => t.date_utc > today)) || [];\n};\nexport const selectPastTournaments = state => {\n  var _state$tournaments$to3;\n  const today = new Date().toISOString();\n  return ((_state$tournaments$to3 = state.tournaments.tournaments) === null || _state$tournaments$to3 === void 0 ? void 0 : _state$tournaments$to3.filter(t => t.date_utc < today)) || [];\n};\nexport const selectCurrentTournaments = state => {\n  var _state$tournaments$to4;\n  const today = new Date().toISOString().split('T')[0];\n  return ((_state$tournaments$to4 = state.tournaments.tournaments) === null || _state$tournaments$to4 === void 0 ? void 0 : _state$tournaments$to4.filter(t => t.date_utc.startsWith(today))) || [];\n};\nexport const selectFeaturedTournaments = state => {\n  var _state$tournaments$to5;\n  return ((_state$tournaments$to5 = state.tournaments.tournaments) === null || _state$tournaments$to5 === void 0 ? void 0 : _state$tournaments$to5.filter(t => t.is_featured)) || [];\n};","map":{"version":3,"names":["createSlice","createAsyncThunk","baseUrl","fetchAllTournamentData","_","rejectWithValue","response","fetch","ok","Error","status","json","error","message","postTournament","newTournament","method","body","JSON","stringify","headers","initialState","tournaments","teams","pools","brackets","isLoading","errMsg","tournamentsSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","push","alert","tournamentsReducer","reducer","selectAllTournaments","selectTournamentById","id","_state$tournaments$to","find","t","parseInt","selectTeamsByTournamentId","_state$tournaments$te","filter","tournamentId","selectPoolsByTournamentId","_state$tournaments$po","p","selectBracketsByTournamentId","_state$tournaments$br","b","selectUpcomingTournaments","_state$tournaments$to2","today","Date","toISOString","date_utc","selectPastTournaments","_state$tournaments$to3","selectCurrentTournaments","_state$tournaments$to4","split","startsWith","selectFeaturedTournaments","_state$tournaments$to5","is_featured"],"sources":["/Users/ag/Desktop/SelectTourney/select-tourney/src/features/tournaments/tournamentsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { baseUrl } from '../../app/shared/baseUrl';\n\n// Thunk to fetch all tournament-related data\nexport const fetchAllTournamentData = createAsyncThunk(\n    'tournaments/fetchAllTournamentData',\n    async (_, { rejectWithValue }) => {\n        try {\n            const response = await fetch(baseUrl); // Ensure baseUrl ends with a slash\n            if (!response.ok) {\n                throw new Error(`Unable to fetch, status: ${response.status}`);\n            }\n            return await response.json();\n        } catch (error) {\n            return rejectWithValue(error.message);\n        }\n    }\n);\n\nexport const postTournament = createAsyncThunk(\n    'tournaments/postTournament',\n    async (newTournament, { rejectWithValue }) => {\n      try {\n        const response = await fetch(`${baseUrl}tournaments`, {\n          method: 'POST',\n          body: JSON.stringify(newTournament),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        if (!response.ok) {\n          throw new Error(`Failed to post tournament: ${response.status}`);\n        }\n        return await response.json();\n      } catch (error) {\n        return rejectWithValue(error.message);\n      }\n    }\n  );\n  \n\nconst initialState = {\n    tournaments: [],\n    teams: [],\n    pools: [],\n    brackets: [],\n    isLoading: true,\n    errMsg: ''\n};\n\nconst tournamentsSlice = createSlice({\n    name: 'tournaments',\n    initialState,\n    reducers: {},\n    extraReducers: (builder) => {\n        builder\n            .addCase(fetchAllTournamentData.pending, (state) => {\n                state.isLoading = true;\n            })\n            .addCase(fetchAllTournamentData.fulfilled, (state, action) => {\n                state.isLoading = false;\n                state.errMsg = '';\n                state.tournaments = action.payload.tournaments || [];\n                state.teams = action.payload.teams || [];\n                state.pools = action.payload.pools || [];\n                state.brackets = action.payload.brackets || [];\n            })\n            .addCase(fetchAllTournamentData.rejected, (state, action) => {\n                state.isLoading = false;\n                state.errMsg = action.payload || 'Fetch failed';\n            })\n            .addCase(postTournament.fulfilled, (state, action) => {\n                state.tournaments.push(action.payload);\n            })\n            .addCase(postTournament.rejected, (state, action) => {\n                alert(`Your tournament could not be posted\\nError: ${action.payload || 'Unknown error'}`);\n            });\n    }\n});\n\nexport const tournamentsReducer = tournamentsSlice.reducer;\n\n// Selectors\nexport const selectAllTournaments = (state) => state.tournaments.tournaments || [];\n\nexport const selectTournamentById = (id) => (state) =>\n    state.tournaments.tournaments?.find(t => t.id === parseInt(id));\n\nexport const selectTeamsByTournamentId = (id) => (state) =>\n    state.tournaments.teams?.filter(t => t.tournamentId === parseInt(id));\n\nexport const selectPoolsByTournamentId = (id) => (state) =>\n    state.tournaments.pools?.filter(p => p.tournamentId === parseInt(id));\n\nexport const selectBracketsByTournamentId = (id) => (state) =>\n    state.tournaments.brackets?.filter(b => b.tournamentId === parseInt(id));\n\nexport const selectUpcomingTournaments = (state) => {\n    const today = new Date().toISOString();\n    return state.tournaments.tournaments?.filter(t => t.date_utc > today) || [];\n};\n\nexport const selectPastTournaments = (state) => {\n    const today = new Date().toISOString();\n    return state.tournaments.tournaments?.filter(t => t.date_utc < today) || [];\n};\n\nexport const selectCurrentTournaments = (state) => {\n    const today = new Date().toISOString().split('T')[0];\n    return state.tournaments.tournaments?.filter(t => t.date_utc.startsWith(today)) || [];\n};\n\nexport const selectFeaturedTournaments = (state) =>\n    state.tournaments.tournaments?.filter(t => t.is_featured) || [];\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}