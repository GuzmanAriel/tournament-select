{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { Fragment as _Fragment, jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useEffect, useState, useRef } from 'react';\nimport { INITIAL_VALUE, ReactSVGPanZoom, TOOL_AUTO } from 'react-svg-pan-zoom';\nimport { precisionRound } from './utils/numbers';\nconst SvgViewer = _a => {\n  var {\n      height = 500,\n      width = 500,\n      bracketWidth,\n      bracketHeight,\n      children,\n      startAt = [0, 0],\n      scaleFactor = 1.1,\n      customToolbar = null\n    } = _a,\n    rest = __rest(_a, [\"height\", \"width\", \"bracketWidth\", \"bracketHeight\", \"children\", \"startAt\", \"scaleFactor\", \"customToolbar\"]);\n  const Viewer = useRef(null);\n  const [tool, setTool] = useState(TOOL_AUTO);\n  const [value, setValue] = useState(INITIAL_VALUE);\n  const [scaleFactorMin, setScaleFactorMin] = useState(1);\n  const scaleFactorMax = 1.25;\n  useEffect(() => {\n    Viewer.current.pan(...startAt);\n  }, []);\n  const lockToBoundaries = v => {\n    const zoomFactor = v.a || v.d;\n    const scaledMaxHeight = v.SVGHeight * zoomFactor - v.viewerHeight;\n    const scaledMaxWidth = v.SVGWidth * zoomFactor - v.viewerWidth;\n    const heightRatio = precisionRound(v.viewerHeight / v.SVGHeight, 2);\n    const widthRatio = precisionRound(v.viewerWidth / v.SVGWidth, 2);\n    setScaleFactorMin(Math.max(heightRatio, widthRatio));\n    setValue(Object.assign(Object.assign({}, v), {\n      e: v.e > 0 ? 0 : v.e < 0 - scaledMaxWidth ? 0 - scaledMaxWidth : v.e,\n      f: v.f > 0 ? 0 : v.f < 0 - scaledMaxHeight ? 0 - scaledMaxHeight : v.f\n    }));\n  };\n  return _jsx(ReactSVGPanZoom, Object.assign({\n    detectAutoPan: false,\n    ref: Viewer,\n    scaleFactor: scaleFactor,\n    scaleFactorMax: scaleFactorMax,\n    scaleFactorMin: scaleFactorMin,\n    width: Math.min(width, bracketWidth),\n    height: Math.min(height, bracketHeight),\n    tool: tool,\n    onChangeTool: setTool,\n    value: value,\n    onChangeValue: setValue,\n    onZoom: lockToBoundaries,\n    onPan: lockToBoundaries,\n    miniatureProps: {\n      position: 'right'\n    },\n    customToolbar: customToolbar !== null && customToolbar !== void 0 ? customToolbar : () => _jsx(_Fragment, {})\n  }, rest, {\n    children: children\n  }));\n};\nexport default SvgViewer;\n//# sourceMappingURL=svg-viewer.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}